<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <title>ÊôÇÈñìË∑ùÈõ¢„Éû„ÉÉ„Éó - Â±Ö‰ΩèÂú∞Ë¶ñÁÇπ</title>
    <style>
        /* „Ç∞„É≠„Éº„Éê„É´„Å™Ëâ≤ÂÆöÁæ©„Å®„Çπ„Éö„Éº„Ç∑„É≥„Ç∞ */
        :root {
            --color-walk: #FFA726;
            --color-train: #42A5F5;
            --color-transfer: #EF5350;
            --color-walk-gradient: linear-gradient(90deg, #FFA726, #FFB74D);
            --color-train-gradient: linear-gradient(90deg, #42A5F5, #64B5F6);
            --color-transfer-gradient: linear-gradient(90deg, #EF5350, #E57373);
            
            /* „Çπ„Éö„Éº„Ç∑„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É† */
            --spacing-xs: 4px;
            --spacing-sm: 8px;
            --spacing-md: 12px;
            --spacing-lg: 16px;
            --spacing-xl: 20px;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'Noto Sans JP', sans-serif;
            background: #000;
            color: white;
            overflow: hidden;
            position: fixed;
            width: 100%;
            height: 100%;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        #container {
            width: 100vw;
            height: 100vh;
            position: relative;
        }

        #canvas {
            width: 100%;
            height: 100%;
            cursor: grab;
        }

        #canvas.grabbing {
            cursor: grabbing;
        }

        /* „Éá„Çπ„ÇØ„Éà„ÉÉ„ÉóÁî®„Ç≥„É≥„Éà„É≠„Éº„É´ */
        #controls {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            z-index: 100;
            max-width: 380px;
            backdrop-filter: blur(10px);
        }

        h2 {
            margin-top: 0;
            font-size: 18px;
            margin-bottom: 15px;
        }

        .control-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-size: 14px;
            color: #aaa;
        }

        select {
            width: 100%;
            padding: 10px;
            background: rgba(20, 20, 20, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 5px;
            font-size: 13px;
            cursor: pointer;
        }

        select:hover {
            border-color: rgba(255, 255, 255, 0.4);
        }

        select:focus {
            outline: none;
            border-color: rgba(100, 200, 255, 0.6);
            background: rgba(30, 30, 30, 0.9);
        }

        .area-info {
            margin-top: 15px;
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            font-size: 13px;
            max-height: 320px;
            overflow-y: auto;
        }

        .area-info .rent {
            color: #ffc107;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .area-info .stations {
            color: #64c8ff;
            margin-bottom: 5px;
        }

        .area-info .score {
            color: #4ecdc4;
            margin-bottom: 10px;
        }
        
        .area-info .total-time {
            color: #ff6b6b;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .area-info .walk-time {
            color: #ffa726;
            margin-bottom: 5px;
        }

        /* Âè≥‰∏ä„ÅÆÊÉÖÂ†±„Éë„Éç„É´ */
        .info {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            font-size: 13px;
            max-width: 250px;
            z-index: 100;
            backdrop-filter: blur(10px);
        }

        /* Âá°‰æã */
        .legend {
            position: absolute;
            bottom: 20px; /* 100px „Åã„Çâ 20px „Å´Êàª„Åô */
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            font-size: 13px;
            max-width: 300px;
            z-index: 100;
            backdrop-filter: blur(10px);
        }

        .legend h4 {
            margin-top: 0;
            margin-bottom: 10px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }

        .legend-color {
            width: 20px;
            height: 4px;
            border-radius: 2px;
            display: inline-block;
        }
        
        .legend-color.walk {
            background: linear-gradient(90deg, rgba(255, 193, 7, 0.9), rgba(255, 193, 7, 0.7));
        }
        
        .legend-color.train {
            background: linear-gradient(90deg, rgba(100, 200, 255, 0.9), rgba(100, 200, 255, 0.7));
        }
        
        .legend-color.transfer {
            background: linear-gradient(90deg, rgba(255, 100, 100, 0.9), rgba(255, 100, 100, 0.7));
        }

        /* „Ç∫„Éº„É†„Ç≥„É≥„Éà„É≠„Éº„É´ */
        .zoom-controls {
            margin-top: 15px;
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .zoom-btn {
            padding: 5px 10px;
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .zoom-btn:hover {
            background: rgba(255,255,255,0.2);
        }

        #zoomLevel {
            min-width: 50px;
            text-align: center;
            color: #aaa;
        }

        /* ÁõÆÁöÑÂú∞„Éû„Éº„Ç´„Éº */
        .destination-marker {
            position: absolute;
            width: 16px;
            height: 16px;
            background: #ff4444;
            border: 2px solid white;
            border-radius: 50%;
            transform: translate(-50%, -50%);
            z-index: 25;
            cursor: pointer;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
            transition: transform 0.2s;
        }

        .destination-marker.partner {
            background: #44ff44;
        }

        .destination-marker.shared {
            background: #ffff44;
        }

        .destination-marker:hover {
            transform: translate(-50%, -50%) scale(1.3);
            z-index: 30;
        }

        .destination-label {
            position: absolute;
            background: rgba(0, 0, 0, 0.7);
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            transform: translateX(-50%);
            margin-top: 15px;
            z-index: 24;
            pointer-events: none;
        }

        /* „Éõ„Éº„É†„Éû„Éº„Ç´„Éº */
        .home-marker {
            position: absolute;
            width: 40px;
            height: 40px;
            background: radial-gradient(circle, rgba(255, 255, 255, 1) 0%, rgba(255, 255, 255, 0.7) 50%, transparent 70%);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            z-index: 30;
            box-shadow: 0 0 30px rgba(255, 255, 255, 0.8);
            pointer-events: none;
        }

        .home-marker::before {
            content: 'üè†';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 20px;
        }

        /* ÁµåË∑Ø„Çª„Ç∞„É°„É≥„Éà */
        .route-segment {
            position: absolute;
            height: 8px;
            transform-origin: left center;
            transition: all 0.3s;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .route-segment.walk {
            background: linear-gradient(90deg, rgba(255, 193, 7, 0.9), rgba(255, 193, 7, 0.7));
            border: 1px solid rgba(255, 193, 7, 0.5);
            z-index: 12;
        }

        .route-segment.train {
            background: linear-gradient(90deg, rgba(100, 200, 255, 0.9), rgba(100, 200, 255, 0.7));
            border: 1px solid rgba(100, 200, 255, 0.5);
            z-index: 11;
        }

        .route-segment.transfer {
            background: linear-gradient(90deg, rgba(255, 100, 100, 0.9), rgba(255, 100, 100, 0.7));
            border: 1px solid rgba(255, 100, 100, 0.5);
            z-index: 12;
        }

        .route-segment.shared {
            height: 12px;
            background: linear-gradient(90deg, rgba(100, 200, 255, 0.9), rgba(100, 200, 255, 0.7));
            border: 1px solid rgba(100, 200, 255, 0.5);
            z-index: 13;
        }

        .route-segment:hover {
            height: 12px;
            margin-top: -2px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            z-index: 20;
        }

        /* ÊôÇÈñìÊÉÖÂ†±„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó */
        .time-info {
            position: absolute;
            background: rgba(0, 0, 0, 0.7);
            padding: 10px;
            border-radius: 6px;
            font-size: 12px;
            color: white;
            z-index: 50;
            max-width: 250px;
            pointer-events: none;
            display: none;
            border: 1px solid rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
        }

        /* „É¢„Éê„Ç§„É´Áî®„Éú„Éà„É†„Ç∑„Éº„Éà */
        .bottom-sheet {
            display: none;
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(28, 28, 30, 0.7);
            border-radius: 20px 20px 0 0;
            z-index: 200;
            transform: translateY(calc(100% - 120px));
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            padding-bottom: env(safe-area-inset-bottom);
            box-shadow: 0 -2px 20px rgba(0,0,0,0.3);
        }

        .bottom-sheet.expanded {
            transform: translateY(0);
            max-height: 70vh;
        }

        .sheet-handle {
            width: 36px;
            height: 5px;
            background: rgba(255,255,255,0.3);
            border-radius: 3px;
            margin: 8px auto;
            cursor: grab;
        }

        .sheet-content {
            padding: 0 20px 20px;
            max-height: 50vh;
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
        }

        .property-chips {
            display: flex;
            gap: 8px;
            overflow-x: auto;
            padding-bottom: 10px;
            margin-bottom: 15px;
            -webkit-overflow-scrolling: touch;
        }

        .property-chip {
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 16px;
            padding: 8px 16px;
            font-size: 14px;
            white-space: nowrap;
            transition: all 0.2s;
            flex-shrink: 0;
            cursor: pointer;
        }

        .property-chip.active {
            background: #007AFF;
            border-color: #007AFF;
        }

        /* „Éì„É•„Éº„É¢„Éº„ÉâÂàá„ÇäÊõø„Åà - ÊúÄ‰∏ä‰Ωç„É¨„Ç§„É§„ÉºÔºàz-indexÂïèÈ°å„ÅÆÂÆåÂÖ®Ëß£Ê±∫Ôºâ */
        .view-mode-toggle {
            position: fixed;
            top: 12px;
            right: 12px;
            z-index: 10000;
            display: flex;
            gap: 2px;
            background: rgba(0, 0, 0, 0.7);
            padding: 2px;
            border-radius: 5px;
            border: 1px solid rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(15px);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
        }
        
        .view-mode-btn {
            padding: 4px 10px;
            background: transparent;
            border: none;
            color: rgba(255, 255, 255, 0.5);
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 11px;
            font-weight: 500;
            height: 24px;
            display: flex;
            align-items: center;
            line-height: 1;
        }
        
        .view-mode-btn.active {
            background: rgba(100, 200, 255, 0.2);
            color: #64c8ff;
        }
        
        .view-mode-btn:hover:not(.active) {
            background: rgba(255, 255, 255, 0.08);
            color: rgba(255, 255, 255, 0.8);
        }
        
        /* „Éì„É•„Éº„Ç≥„É≥„ÉÜ„Éä */
        .view-container {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        
        .view-container.active {
            display: block;
        }
        
        /* ÊØîËºÉ„Éì„É•„Éº - ÊôÇÈñìËª∏„Éê„Éº„Ç∞„É©„ÉïÂΩ¢Âºè */
        .compare-view {
            padding: 30px;
            height: 100%;
            overflow-y: auto;
            background: #000;
        }
        
        .compare-header {
            margin-bottom: 30px;
            text-align: center;
        }
        
        .compare-title {
            font-size: 20px;
            font-weight: 600;
            color: #fff;
            margin-bottom: 15px;
        }
        
        .compare-legend {
            display: flex;
            justify-content: center;
            gap: 20px;
            font-size: 12px;
            color: rgba(255, 255, 255, 0.6);
        }
        
        .compare-legend-item {
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .compare-legend-color {
            width: 20px;
            height: 4px;
            border-radius: 2px;
        }
        
        .compare-destinations {
            margin-left: 350px;  /* Áâ©‰ª∂„Ç´„Éº„ÉâÂè≥Á´Ø(20+268+1.778+40) + ‰ΩôÁôΩ20px */
            margin-right: 20px;   /* Âè≥Á´Ø„Åã„Çâ„ÅÆ‰ΩôÁôΩ */
            width: calc(100% - 370px); /* ÊÆã„Çä„ÅÆÂπÖ„Çí‰ΩøÁî® */
        }
        
        /* ÊØîËºÉ„Éì„É•„Éº„ÅÆÊ®™Ê£í„Ç∞„É©„Éï - ÂæπÂ∫ïÁöÑ„Å™È´ò„ÅïÂúßÁ∏Æ */
        .compare-view {
            padding: 15px;
            height: 100%;
            overflow-y: auto;
            background: #000;
        }
        
        .compare-header {
            margin-bottom: 15px;
            text-align: center;
        }
        
        .compare-title {
            font-size: 16px;
            font-weight: 600;
            color: #fff;
            margin-bottom: 8px;
        }
        
        .compare-legend {
            display: flex;
            justify-content: center;
            gap: 15px;
            font-size: 11px;
            color: rgba(255, 255, 255, 0.6);
        }
        
        .compare-legend-item {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        .compare-legend-color {
            width: 16px;
            height: 3px;
            border-radius: 2px;
        }
        
        .compare-destinations {
            margin-left: 350px;  /* Áâ©‰ª∂„Ç´„Éº„ÉâÂè≥Á´Ø(20+268+1.778+40) + ‰ΩôÁôΩ20px */
            margin-right: 20px;   /* Âè≥Á´Ø„Åã„Çâ„ÅÆ‰ΩôÁôΩ */
            width: calc(100% - 370px); /* ÊÆã„Çä„ÅÆÂπÖ„Çí‰ΩøÁî® */
        }
        
        .destination-comparison {
            background: rgba(20, 20, 20, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.08);
            border-radius: 6px;
            padding: 10px;
            margin-bottom: 10px;
        }
        
        .destination-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .destination-name {
            font-size: 14px;
            font-weight: 600;
            color: #fff;
        }
        
        .destination-frequency {
            font-size: 11px;
            color: rgba(255, 255, 255, 0.5);
        }
        
        .axis-labels {
            display: flex;
            justify-content: space-between;
            font-size: 9px;
            color: rgba(255, 255, 255, 0.35);
            margin-bottom: 6px;
            padding: 0 3px;
        }
        
        .property-comparison {
            margin-bottom: 4px;
        }
        
        .property-label {
            font-size: 10px;
            color: rgba(255, 255, 255, 0.6);
            margin-bottom: 2px;
        }
        
        .property-label.current {
            color: #64c8ff;
            font-weight: 600;
        }
        
        .time-bar-container {
            position: relative;
            height: 18px;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 9px;
            margin-bottom: 4px;
            margin-left: 55px;
        }
        
        .time-bar {
            position: absolute;
            height: 100%;
            border-radius: 9px;
            display: flex;
            align-items: center;
            overflow: hidden;
            box-sizing: border-box;
            font-size: 0; /* ÈöôÈñì„ÇíÈò≤„Åê */
        }
        
        .time-segment {
            display: inline-flex; /* inline-flex„Å´Â§âÊõ¥ */
            align-items: center;
            justify-content: center;
            font-size: 9px;
            font-weight: 500;
            color: white;
            position: relative;
            box-sizing: border-box;
            height: 100%;
            margin: 0;
            padding: 0;
            border: none;
            vertical-align: middle; /* middle„Å´Â§âÊõ¥ */
            line-height: 1;
        }
        
        .time-total {
            position: absolute;
            left: -50px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 10px;
            font-weight: 600;
            color: rgba(255, 255, 255, 0.9);
            text-align: right;
            width: 45px;
            white-space: nowrap;
        }
        
        .segment-walk {
            background: var(--color-walk-gradient);
        }
        
        .segment-train {
            background: var(--color-train-gradient);
        }
        
        .segment-transfer {
            background: var(--color-transfer-gradient);
        }
        
        .time-total {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 12px;
            font-weight: 600;
            color: white;
            background: rgba(0, 0, 0, 0.5);
            padding: 2px 6px;
            border-radius: 10px;
        }
        
        .best-marker {
            position: absolute;
            right: -25px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 16px;
        }
        
        /* „É©„É≥„Ç≠„É≥„Ç∞„Éì„É•„Éº - Ëâ≤„ÅÆÂÆåÂÖ®Áµ±‰∏Ä„Å®È´ò„Åï„ÅÆÊúÄÈÅ©Âåñ */
        .ranking-view {
            padding: 15px;
            height: 100%;
            overflow-y: auto;
            background: #000;
        }
        
        .ranking-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
            padding-bottom: 8px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.15);
        }
        
        .ranking-title {
            font-size: 16px;
            font-weight: 600;
            color: #fff;
        }
        
        .ranking-filters {
            display: flex;
            gap: 8px;
            font-size: 11px;
            color: rgba(255, 255, 255, 0.5);
        }
        
        .ranking-list {
            margin-left: 350px;  /* Áâ©‰ª∂„Ç´„Éº„ÉâÂè≥Á´Ø(20+268+1.778+40) + ‰ΩôÁôΩ20px */
            margin-right: 20px;   /* Âè≥Á´Ø„Åã„Çâ„ÅÆ‰ΩôÁôΩ */
            width: calc(100% - 370px); /* ÊÆã„Çä„ÅÆÂπÖ„Çí‰ΩøÁî® */
        }
        
        .ranking-item {
            padding: 8px 0 8px 8px;  /* Â∑¶„Éë„Éá„Ç£„É≥„Ç∞„ÇíÊúÄÂàù„Åã„ÇâË®≠ÂÆö */
            border-bottom: 1px solid rgba(255, 255, 255, 0.08);
            transition: all 0.2s;
            cursor: pointer;
            position: relative;  /* Áñë‰ººË¶ÅÁ¥†Áî® */
        }
        
        /* Â∑¶„ÅÆÁ∏¶Á∑ö„ÅØÁñë‰ººË¶ÅÁ¥†„ÅßÂÆüË£Ö */
        .ranking-item::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 2px;
            background: transparent;
            transition: background 0.2s;
        }
        
        .ranking-item:hover {
            background: rgba(255, 255, 255, 0.02);
        }
        
        .ranking-item.current::before {
            background: rgba(100, 200, 255, 0.8);
        }
        
        .ranking-item.current {
            background: rgba(100, 200, 255, 0.04);
        }
        
        .ranking-item-header {
            display: flex;
            align-items: center;
            margin-bottom: 6px;
        }
        
        .ranking-number {
            font-size: 16px;
            font-weight: bold;
            margin-right: 10px;
            min-width: 25px;
            text-align: center;
            color: rgba(255, 255, 255, 0.7);
        }
        
        .ranking-medal {
            font-size: 18px;
            margin-right: 10px;
        }
        
        .ranking-name {
            font-size: 14px;
            font-weight: 500;
            color: #fff;
            flex: 1;
        }
        
        .ranking-time-total {
            font-size: 15px;
            font-weight: 600;
            color: #ff6b6b;
        }
        
        .ranking-time-bar {
            position: relative;
            height: 16px;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 8px;
            margin-bottom: 6px;
            overflow: hidden;
        }
        
        .ranking-time-bar-fill {
            height: 100%;
            background: linear-gradient(90deg, rgba(66, 165, 245, 0.25), rgba(100, 181, 246, 0.25));
            border: 1px solid rgba(66, 165, 245, 0.3);
            border-radius: 8px;
            position: relative;
        }
        
        .ranking-walk-bar {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            background: var(--color-walk-gradient);
            opacity: 0.9;
            display: flex;
            align-items: center;
            padding-left: 6px;
            font-size: 9px;
            font-weight: 600;
            color: white;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }
        
        .ranking-details {
            display: flex;
            gap: 12px;
            font-size: 11px;
            color: rgba(255, 255, 255, 0.6);
            padding-left: 35px;
        }
        
        .ranking-detail-item {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        .ranking-detail-item strong {
            color: rgba(255, 255, 255, 0.85);
            font-weight: 500;
        }
        
        .ranking-details {
            display: flex;
            gap: 15px;
            font-size: 13px;
            color: rgba(255, 255, 255, 0.6);
            padding-left: 35px;  /* Áï™Âè∑/„É°„ÉÄ„É´„ÅÆÂπÖ„ÇíËÄÉÊÖÆ„Åó„Å¶Ë™øÊï¥ */
        }
        
        .ranking-detail-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .ranking-detail-item strong {
            color: rgba(255, 255, 255, 0.9);
            font-weight: 500;
        }
        
        /* „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú */
        @media (max-width: 1200px) {
            .compare-destinations, .ranking-list {
                margin-left: 350px;  /* Áâ©‰ª∂„Ç´„Éº„ÉâÂè≥Á´Ø(20+268+1.778+40) + ‰ΩôÁôΩ20px */
                width: calc(100% - 370px);
            }
        }
        
        @media (max-width: 1024px) {
            .compare-view {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        @media (max-width: 767px) {
            #controls {
                display: none;
            }
            
            #compareControls, #rankingControls {
                display: none;
            }
            
            .info {
                display: none;
            }
            
            .legend {
                display: block;
                bottom: 100px; /* „É¢„Éê„Ç§„É´Áâà„Åß„ÅÆÂá°‰æã„ÅÆ‰ΩçÁΩÆË™øÊï¥ */
            }
            
            .bottom-sheet {
                display: block;
            }
            
            .compare-destinations, .ranking-list {
                margin-left: 20px;   /* „É¢„Éê„Ç§„É´„Åß„ÅØÂ∑¶„ÅÆ‰ΩôÁôΩ„ÇíÊúÄÂ∞èÈôê„Å´ */
                margin-right: 20px;
                width: calc(100% - 40px); /* ÁîªÈù¢ÂπÖ„Åã„ÇâÂ∑¶Âè≥„ÅÆ‰ΩôÁôΩ„ÇíÂºï„ÅÑ„ÅüÂπÖ */
            }
            
            .compare-view {
                grid-template-columns: 1fr;
            }
            
            .ranking-view {
                padding: 20px;
            }
            
            .ranking-item {
                padding: 15px;
            }
            
            .ranking-number {
                font-size: 20px;
                margin-right: 15px;
            }
            
            .ranking-name {
                font-size: 16px;
            }
            
            .ranking-details {
                flex-direction: column;
                gap: 5px;
            }
        }
    </style>
</head>
<body>
    <div id="container">
        <!-- ÂÄãÂà•„Éì„É•„Éº -->
        <div id="singleView" class="view-container active">
            <canvas id="canvas"></canvas>
            
            <!-- „Éá„Çπ„ÇØ„Éà„ÉÉ„ÉóÁî®„Ç≥„É≥„Éà„É≠„Éº„É´ -->
            <div id="controls">
                <h2>üè† Â±Ö‰ΩèÂú∞„Åã„ÇâË¶ã„ÅüÁõÆÁöÑÂú∞„Éû„ÉÉ„Éó</h2>
                
                <div class="control-group">
                    <label>Â±Ö‰ΩèÁâ©‰ª∂„ÇíÈÅ∏Êäû</label>
                    <select id="areaSelect" onchange="updateSelectedArea()">
                        <!-- ÂãïÁöÑ„Å´ÁîüÊàê„Åï„Çå„Åæ„Åô -->
                    </select>
                </div>
                
                <div class="control-group">
                    <label>‰∏¶„Å≥È†Ü</label>
                    <select id="sortOrder" onchange="updateSortOrder()">
                        <option value="time_desc">ÁßªÂãïÊôÇÈñì„ÅÆÁü≠„ÅÑÈ†Ü</option>
                        <option value="walk_desc">ÂæíÊ≠©ÊôÇÈñì„ÅÆÁü≠„ÅÑÈ†Ü</option>
                        <option value="rent_asc">ÂÆ∂Ë≥É„ÅÆÂÆâ„ÅÑÈ†Ü</option>
                    </select>
                </div>
                
                
                <div class="area-info" id="areaInfo">
                    <div class="rent">ÂÆ∂Ë≥É: -</div>
                    <div class="stations">ÊúÄÂØÑÈßÖ: -</div>
                    <div class="total-time">ÊúàÈñìÁ∑èÁßªÂãïÊôÇÈñì: -</div>
                    <div class="walk-time">„ÅÜ„Å°ÂæíÊ≠©ÊôÇÈñì: -</div>
                </div>
            </div>
            
            <!-- ÊÉÖÂ†±„Éë„Éç„É´ -->
            <div class="info">
                <strong>üìç Ë¶ãÊñπ</strong><br>
                ÈÅ∏Êäû„Åó„ÅüÁâ©‰ª∂„Çí‰∏≠ÂøÉ„Å´„ÄÅÂêÑÁõÆÁöÑÂú∞„Å∏„ÅÆÂÆüÈöõ„ÅÆÁßªÂãïÊôÇÈñì„ÅåÂèØË¶ñÂåñ„Åï„Çå„Åæ„Åô„ÄÇ<br><br>
                üî¥ „ÅÇ„Å™„Åü„ÅÆÁõÆÁöÑÂú∞<br>
                üü¢ „Éë„Éº„Éà„Éä„Éº„ÅÆÁõÆÁöÑÂú∞<br>
                üü° ÂÖ±ÈÄö„ÅÆÁõÆÁöÑÂú∞<br><br>
                <strong>„Éû„Ç¶„Çπ„Éõ„Ç§„Éº„É´</strong>„Åß„Ç∫„Éº„É†<br>
                <strong>„Éâ„É©„ÉÉ„Ç∞</strong>„ÅßÁßªÂãï<br><br>
                <div class="zoom-controls" style="margin-top: 10px;">
                    <button class="zoom-btn" onclick="zoom(0.8)">‚àí</button>
                    <span id="zoomLevelInfo">200%</span>
                    <button class="zoom-btn" onclick="zoom(1.2)">Ôºã</button>
                </div>
            </div>
            
            <!-- Âá°‰æã -->
            <div class="legend">
                <h4>ÁßªÂãïÁµåË∑Ø</h4>
                <div class="legend-item">
                    <div class="legend-color walk"></div>
                    <span>ÂæíÊ≠©</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color train"></div>
                    <span>ÈõªËªä</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color transfer"></div>
                    <span>‰πó„ÇäÊèõ„Åà</span>
                </div>
            </div>
        </div>
        
        <!-- ÊØîËºÉ„Éì„É•„Éº -->
        <div id="compareView" class="view-container">
            <div id="compareControls" style="position: absolute; top: 20px; left: 20px; background: rgba(0, 0, 0, 0.9); padding: 20px; border-radius: 10px; border: 1px solid rgba(255, 255, 255, 0.2); z-index: 100; max-width: 380px; backdrop-filter: blur(10px);">
                <h2>üè† Â±Ö‰ΩèÂú∞„Åã„ÇâË¶ã„ÅüÁõÆÁöÑÂú∞„Éû„ÉÉ„Éó</h2>
                
                <div class="control-group">
                    <label>Â±Ö‰ΩèÁâ©‰ª∂„ÇíÈÅ∏Êäû</label>
                    <select id="compareAreaSelect" onchange="updateSelectedArea()">
                        <!-- ÂãïÁöÑ„Å´ÁîüÊàê„Åï„Çå„Åæ„Åô -->
                    </select>
                </div>
                
                <div class="control-group">
                    <label>‰∏¶„Å≥È†Ü</label>
                    <select id="compareSortOrder" onchange="updateSortOrder()">
                        <option value="time_desc">ÁßªÂãïÊôÇÈñì„ÅÆÁü≠„ÅÑÈ†Ü</option>
                        <option value="walk_desc">ÂæíÊ≠©ÊôÇÈñì„ÅÆÁü≠„ÅÑÈ†Ü</option>
                        <option value="rent_asc">ÂÆ∂Ë≥É„ÅÆÂÆâ„ÅÑÈ†Ü</option>
                    </select>
                </div>
                
                <div class="area-info" id="compareAreaInfo">
                    <div class="rent">ÂÆ∂Ë≥É: -</div>
                    <div class="stations">ÊúÄÂØÑÈßÖ: -</div>
                    <div class="total-time">ÊúàÈñìÁ∑èÁßªÂãïÊôÇÈñì: -</div>
                    <div class="walk-time">„ÅÜ„Å°ÂæíÊ≠âÊôÇÈñì: -</div>
                </div>
            </div>
            <div class="compare-view">
                <div class="compare-header">
                    <h2 class="compare-title">ÁõÆÁöÑÂú∞„Å∏„ÅÆÁßªÂãïÊôÇÈñìÊØîËºÉ</h2>
                    <div class="compare-legend">
                        <div class="compare-legend-item">
                            <div class="compare-legend-color" style="background: var(--color-walk);"></div>
                            <span>ÂæíÊ≠©</span>
                        </div>
                        <div class="compare-legend-item">
                            <div class="compare-legend-color" style="background: var(--color-train);"></div>
                            <span>ÈõªËªä</span>
                        </div>
                        <div class="compare-legend-item">
                            <div class="compare-legend-color" style="background: var(--color-transfer);"></div>
                            <span>‰πóÊèõ</span>
                        </div>
                    </div>
                </div>
                <div class="compare-destinations" id="compareContent">
                    <!-- ÂãïÁöÑ„Å´ÁîüÊàê -->
                </div>
            </div>
        </div>
        
        <!-- „É©„É≥„Ç≠„É≥„Ç∞„Éì„É•„Éº -->
        <div id="rankingView" class="view-container">
            <div id="rankingControls" style="position: absolute; top: 20px; left: 20px; background: rgba(0, 0, 0, 0.9); padding: 20px; border-radius: 10px; border: 1px solid rgba(255, 255, 255, 0.2); z-index: 100; max-width: 380px; backdrop-filter: blur(10px);">
                <h2>üè† Â±Ö‰ΩèÂú∞„Åã„ÇâË¶ã„ÅüÁõÆÁöÑÂú∞„Éû„ÉÉ„Éó</h2>
                
                <div class="control-group">
                    <label>Â±Ö‰ΩèÁâ©‰ª∂„ÇíÈÅ∏Êäû</label>
                    <select id="rankingAreaSelect" onchange="updateSelectedArea()">
                        <!-- ÂãïÁöÑ„Å´ÁîüÊàê„Åï„Çå„Åæ„Åô -->
                    </select>
                </div>
                
                <div class="control-group">
                    <label>‰∏¶„Å≥È†Ü</label>
                    <select id="rankingSortOrder" onchange="updateSortOrder()">
                        <option value="time_desc">ÁßªÂãïÊôÇÈñì„ÅÆÁü≠„ÅÑÈ†Ü</option>
                        <option value="walk_desc">ÂæíÊ≠©ÊôÇÈñì„ÅÆÁü≠„ÅÑÈ†Ü</option>
                        <option value="rent_asc">ÂÆ∂Ë≥É„ÅÆÂÆâ„ÅÑÈ†Ü</option>
                    </select>
                </div>
                
                <div class="area-info" id="rankingAreaInfo">
                    <div class="rent">ÂÆ∂Ë≥É: -</div>
                    <div class="stations">ÊúÄÂØÑÈßÖ: -</div>
                    <div class="total-time">ÊúàÈñìÁ∑èÁßªÂãïÊôÇÈñì: -</div>
                    <div class="walk-time">„ÅÜ„Å°ÂæíÊ≠©ÊôÇÈñì: -</div>
                </div>
            </div>
            <div class="ranking-view">
                <div class="ranking-header">
                    <h2 class="ranking-title">Áâ©‰ª∂„É©„É≥„Ç≠„É≥„Ç∞</h2>
                    <div class="ranking-filters">
                        <span>‚òëÁ∑èÁßªÂãï</span>
                        <span>‚òëÂæíÊ≠©</span>
                        <span>‚òëÂÆ∂Ë≥É</span>
                    </div>
                </div>
                <div class="ranking-list" id="rankingList">
                    <!-- ÂãïÁöÑ„Å´ÁîüÊàê -->
                </div>
            </div>
        </div>
    </div>
    
    <!-- „Éì„É•„Éº„É¢„Éº„ÉâÂàá„ÇäÊõø„ÅàÔºàÊúÄ‰∏ä‰Ωç„Å´ÈÖçÁΩÆÔºâ -->
    <div class="view-mode-toggle">
        <button class="view-mode-btn active" onclick="setViewMode('single', event)">ÂÄãÂà•</button>
        <button class="view-mode-btn" onclick="setViewMode('compare', event)">ÊØîËºÉ</button>
        <button class="view-mode-btn" onclick="setViewMode('ranking', event)">„É©„É≥„Ç≠„É≥„Ç∞</button>
    </div>
        
        <!-- „É¢„Éê„Ç§„É´Áî®„Éú„Éà„É†„Ç∑„Éº„Éà -->
        <div class="bottom-sheet" id="bottomSheet">
            <div class="sheet-handle" onclick="toggleBottomSheet()"></div>
            <div class="sheet-content">
                <div class="view-modes">
                    <button class="view-btn active" onclick="setViewMode('single', event)">ÂÄãÂà•</button>
                    <button class="view-btn" onclick="setViewMode('compare', event)">ÊØîËºÉ</button>
                    <button class="view-btn" onclick="setViewMode('ranking', event)">„É©„É≥„Ç≠„É≥„Ç∞</button>
                </div>
                
                <div class="property-chips" id="propertyChips">
                    <!-- ÂãïÁöÑ„Å´ÁîüÊàê„Åï„Çå„Åæ„Åô -->
                </div>
                
                <div class="area-info">
                    <div class="rent" id="mobileRent">ÂÆ∂Ë≥É: -</div>
                    <div class="stations" id="mobileStation">ÊúÄÂØÑÈßÖ: -</div>
                    <div class="total-time" id="mobileTotalTime">ÊúàÈñìÁ∑èÁßªÂãïÊôÇÈñì: -</div>
                    <div class="walk-time" id="mobileWalkTime">„ÅÜ„Å°ÂæíÊ≠©ÊôÇÈñì: -</div>
                </div>
            </div>
        </div>
        
        <!-- „ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó -->
        <div class="time-info" id="timeInfo"></div>
    </div>

    <script>
        // „Ç≠„É£„É≥„Éê„ÇπË®≠ÂÆö
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        
        // „Ç≠„É£„É≥„Éê„Çπ„Çµ„Ç§„Ç∫Ë®≠ÂÆö
        function resizeCanvas() {
            const container = document.getElementById('container');
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            if (container) {
                container.style.width = window.innerWidth + 'px';
                container.style.height = window.innerHeight + 'px';
            }
        }
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);
        
        // ========================================
        // „Éá„Éº„ÇøÂÆöÁæ©ÔºàJSON„Éï„Ç°„Ç§„É´„Åã„ÇâÂãïÁöÑ„Å´Ë™≠„ÅøËæº„ÅøÔºâ
        // ========================================
        
        // „Éá„Éº„ÇøÊ†ºÁ¥çÂ§âÊï∞
        let destinations = [];
        let areas = [];
        
        // JSON„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Çì„ÅßÂÜÖÈÉ®ÂΩ¢Âºè„Å´Â§âÊèõ
        async function loadDataFromJSON() {
            try {
                // JSON„Éï„Ç°„Ç§„É´„Çí‰∏¶Âàó„ÅßË™≠„ÅøËæº„Åø
                const [destResponse, propResponse] = await Promise.all([
                    fetch('./data/destinations.json'),
                    fetch('./data/properties.json')
                ]);
                
                if (!destResponse.ok || !propResponse.ok) {
                    throw new Error('„Éá„Éº„Çø„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
                }
                
                const destData = await destResponse.json();
                const propData = await propResponse.json();
                
                // destinationsÈÖçÂàó„ÇíÊßãÁØâÔºàÁ≠âÈñìÈöî„Å´ËßíÂ∫¶„ÇíÈÖçÁΩÆÔºâ
                destinations = destData.destinations.map((dest, index) => ({
                    name: dest.name,
                    owner: dest.owner === 'both' ? 'shared' : dest.owner,
                    frequency: dest.monthly_frequency,
                    angle: (index * 360 / destData.destinations.length)
                }));
                
                // ÈáçË§á„ÇíÈô§ÂéªÔºàÂêå„ÅòÂêçÂâç„Å®‰ΩèÊâÄ„ÅÆÁâ©‰ª∂„Çí1„Å§„Å†„ÅëÊÆã„ÅôÔºâ
                const uniqueProperties = [];
                const seen = new Set();
                propData.properties.forEach(prop => {
                    const key = `${prop.name}_${prop.address}`;
                    if (!seen.has(key)) {
                        seen.add(key);
                        uniqueProperties.push(prop);
                    }
                });
                
                console.log(`Áâ©‰ª∂„Éá„Éº„Çø: ${propData.properties.length}‰ª∂ ‚Üí ${uniqueProperties.length}‰ª∂ÔºàÈáçË§áÈô§ÂéªÔºâ`);
                
                // areasÈÖçÂàó„ÇíÊßãÁØâÔºà„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇÇ‰øùÊåÅÔºâ
                areas = uniqueProperties.map((prop, index) => {
                    const area = {
                        originalIndex: index,  // ÂÖÉ„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Çí‰øùÊåÅ
                        name: prop.name,
                        address: prop.address,
                        stations: formatStations(prop.stations),
                        rent: prop.rent,
                        routes: []
                    };
                    
                    // ÂêÑÁõÆÁöÑÂú∞„Å∏„ÅÆÁµåË∑ØÊÉÖÂ†±„ÇíÂ§âÊèõ
                    prop.routes.forEach(route => {
                        const destIndex = findDestinationIndex(route.destination);
                        if (destIndex !== -1) {
                            // walk_only„ÅÆÂ†¥Âêà„ÅÆÂá¶ÁêÜ
                            if (route.details && route.details.walk_only) {
                                area.routes.push({
                                    dest: destIndex,
                                    walk: route.details.walk_time || route.total_time,
                                    lines: [],
                                    transfer: 0,
                                    walk2: 0,
                                    total: route.total_time,
                                    rawDetails: route.details  // ÂÖÉ„Éá„Éº„Çø„Çí‰øùÊåÅ
                                });
                            } else {
                                // ÈÄöÂ∏∏„ÅÆÈõªËªäÂà©Áî®ÁµåË∑Ø
                                const trainSegments = extractTrainLines(route.details);
                                
                                // ÊóßÂΩ¢Âºè„ÅÆÂ†¥Âêà„ÅÆ‰πóÊèõÊôÇÈñìÔºàÊñ∞ÂΩ¢Âºè„Åß„ÅØÂÄãÂà•„Å´Âê´„Åæ„Çå„ÇãÔºâ
                                let totalTransfer = 0;
                                if (!route.details.trains?.[0]?.hasOwnProperty('from')) {
                                    totalTransfer = route.details.transfer_time || 0;
                                }
                                
                                area.routes.push({
                                    dest: destIndex,
                                    walk: route.details.walk_to_station || 0,
                                    lines: trainSegments,
                                    transfer: totalTransfer,
                                    walk2: route.details.walk_from_station || 0,
                                    total: route.total_time,
                                    rawDetails: route.details  // ÂÖÉ„Éá„Éº„Çø„Çí‰øùÊåÅ
                                });
                            }
                        }
                    });
                    
                    return area;
                });
                
                // „ÇΩ„Éº„Éà„ÇíÂÆüË°å„Åó„Å¶„Åã„ÇâUI„ÇíÊõ¥Êñ∞
                sortedAreas = sortAreas();
                updatePropertySelector();
                
                // ÂàùÊúüÈÅ∏Êäû„ÇíÁ¢∫ÂÆü„Å´Ë®≠ÂÆö
                const allSelects = ['areaSelect', 'rankingAreaSelect', 'compareAreaSelect'];
                allSelects.forEach(id => {
                    const select = document.getElementById(id);
                    if (select && (select.value === '' || select.value === null)) {
                        select.value = '0';
                        console.log('üìå Initial selection set for', id, 'to 0');
                    }
                });
                
                updateAreaInfo();
                animate();
                
            } catch (error) {
                console.error('„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
                // „Ç®„É©„ÉºÊôÇ„ÅØ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éá„Éº„Çø„ÇíË°®Á§∫
                alert('„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Çµ„É≥„Éó„É´„Éá„Éº„Çø„ÇíË°®Á§∫„Åó„Åæ„Åô„ÄÇ');
            }
        }
        
        // „Éò„É´„Éë„ÉºÈñ¢Êï∞ÔºöÈßÖÊÉÖÂ†±„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà
        function formatStations(stations) {
            if (!stations || stations.length === 0) return 'ÈßÖÊÉÖÂ†±„Å™„Åó';
            // ÊúÄÂàù„ÅÆÈßÖ„ÅÆ„Åø„ÇíË°®Á§∫Ôºà„É°„Ç§„É≥„ÅÆÊúÄÂØÑ„ÇäÈßÖÔºâ
            const mainStation = stations[0];
            return `${mainStation.name} ÂæíÊ≠©${mainStation.walk_time}ÂàÜ`;
        }
        
        // „Éò„É´„Éë„ÉºÈñ¢Êï∞ÔºöÁõÆÁöÑÂú∞Âêç„Åã„Çâ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇíÊ§úÁ¥¢
        function findDestinationIndex(destName) {
            // destinationsÈÖçÂàó„Åã„ÇâÁõ¥Êé•Ê§úÁ¥¢ÔºàÂÆåÂÖ®‰∏ÄËá¥Ôºâ
            const index = destinations.findIndex(d => d.name === destName);
            if (index === -1) {
                console.warn(`ÁõÆÁöÑÂú∞„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: "${destName}"`);
                console.log('Âà©Áî®ÂèØËÉΩ„Å™ÁõÆÁöÑÂú∞:', destinations.map(d => d.name));
            }
            return index;
        }
        
        // „Éò„É´„Éë„ÉºÈñ¢Êï∞ÔºöÈõªËªäÊÉÖÂ†±„ÇíÊäΩÂá∫ÔºàÊñ∞Êóß‰∏°ÂΩ¢Âºè„Å´ÂØæÂøúÔºâ
        function extractTrainLines(details) {
            if (!details.trains || details.trains.length === 0) return [];
            
            // Êñ∞ÂΩ¢ÂºèÔºàtransfer_after„ÅÇ„ÇäÔºâ„ÅÆÂ†¥Âêà
            if (details.trains[0] && details.trains[0].hasOwnProperty('from')) {
                // Êñ∞ÂΩ¢Âºè: ÂêÑÈõªËªä„Å®‰πóÊèõÊÉÖÂ†±„ÇíÂê´„ÇÄË©≥Á¥∞„Éá„Éº„Çø
                const segments = [];
                details.trains.forEach((train, index) => {
                    segments.push({
                        name: train.line,
                        time: train.time,
                        from: train.from,
                        to: train.to
                    });
                    
                    // ‰πóÊèõÊÉÖÂ†±„Åå„ÅÇ„Çå„Å∞ËøΩÂä†
                    if (train.transfer_after) {
                        segments.push({
                            type: 'transfer',
                            time: train.transfer_after.time,
                            from_line: train.line,
                            to_line: train.transfer_after.to_line
                        });
                    }
                });
                return segments;
            } else {
                // ÊóßÂΩ¢Âºè: „Ç∑„É≥„Éó„É´„Å™ÈÖçÂàó
                return details.trains.map(train => ({
                    name: train.line,
                    time: train.time
                }));
            }
        }
        
        // „ÇΩ„Éº„ÉàÂá¶ÁêÜ
        function sortAreas() {
            if (areas.length === 0) {
                console.log('sortAreas: areas is empty');
                return [];
            }
            
            console.log('sortAreas called. currentSortOrder:', currentSortOrder);
            console.log('areas before sort:', areas.map(a => a.name));
            
            // „É´„Éï„Ç©„É≥„Éó„É≠„Ç∞„É¨ÔºàÊúÄÂàù„ÅÆÁâ©‰ª∂Ôºâ„ÇíÈô§„ÅÑ„Å¶‰∏¶„Å≥Êõø„Åà
            const firstProperty = areas[0];
            const otherProperties = areas.slice(1);
            
            // „ÇΩ„Éº„ÉàÂÆüË°å
            switch(currentSortOrder) {
                case 'time_desc':
                    // ÊúàÈñìÁ∑èÁßªÂãïÊôÇÈñì„ÅÆÁü≠„ÅÑÈ†ÜÔºàÊòáÈ†ÜÔºâ
                    otherProperties.sort((a, b) => {
                        const { totalTime: timeA } = calculateMonthlyTimes(a);
                        const { totalTime: timeB } = calculateMonthlyTimes(b);
                        console.log(`Comparing ${a.name}(${timeA}) vs ${b.name}(${timeB}) = ${timeA - timeB}`);
                        return timeA - timeB;
                    });
                    break;
                case 'walk_desc':
                    // ÂæíÊ≠©ÊôÇÈñì„ÅÆÁü≠„ÅÑÈ†ÜÔºàÊòáÈ†ÜÔºâ
                    otherProperties.sort((a, b) => {
                        const { totalWalkTime: walkA } = calculateMonthlyTimes(a);
                        const { totalWalkTime: walkB } = calculateMonthlyTimes(b);
                        return walkA - walkB;
                    });
                    break;
                case 'rent_asc':
                    // ÂÆ∂Ë≥É„ÅÆÂÆâ„ÅÑÈ†Ü
                    otherProperties.sort((a, b) => {
                        const rentA = parseRent(a.rent);
                        const rentB = parseRent(b.rent);
                        console.log(`Comparing rent: ${a.name}(${rentA}) vs ${b.name}(${rentB}) = ${rentA - rentB}`);
                        return rentA - rentB;
                    });
                    break;
            }
            
            // „É´„Éï„Ç©„É≥„Éó„É≠„Ç∞„É¨„ÇíÊúÄÂàù„Å´ÈÖçÁΩÆ„Åó„ÄÅ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Çí‰øùÊåÅ
            sortedAreas = [firstProperty, ...otherProperties];
            
            console.log('üéâ Sort completed. Order:', sortedAreas.map((a, i) => `${i+1}.${a.name}`).slice(0, 5).join(', '), '...');
            console.log('üéâ Total:', sortedAreas.length, 'properties');
            
            // originalIndex„ÅåÂ§±„Çè„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÅãÁ¢∫Ë™ç
            sortedAreas.forEach((area, newIndex) => {
                if (area.originalIndex === undefined) {
                    console.error('originalIndex is missing for area:', area.name);
                }
            });
            
            return sortedAreas;
        }
        
        // „Çª„É¨„ÇØ„Çø„ÇíÂãïÁöÑ„Å´Êõ¥Êñ∞
        function updatePropertySelector() {
            const select = document.getElementById('areaSelect');
            const rankingSelect = document.getElementById('rankingAreaSelect');
            const compareSelect = document.getElementById('compareAreaSelect');
            if (!select && !rankingSelect && !compareSelect) return;
            
            // „ÇΩ„Éº„ÉàÊ∏à„Åø„É™„Çπ„Éà„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅØÂÖÉ„ÅÆareas„Çí‰ΩøÁî®
            const displayAreas = sortedAreas.length > 0 ? sortedAreas : areas;
            console.log('üì¶ updatePropertySelector: Using', displayAreas.length, 'areas');
            console.log('üì¶ Display order:', displayAreas.map(a => a.name).slice(0, 5), '...');
            
            const optionsHtml = displayAreas.map((area, index) => 
                `<option value="${index}">${area.name}</option>`
            ).join('');
            
            console.log('üìù Creating dropdown HTML with:', displayAreas.slice(0, 3).map(a => a.name));
            
            // ÁèæÂú®„ÅÆÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÇãÁâ©‰ª∂„ÅÆoriginalIndex„Çí‰øùÂ≠ò
            let currentAreaIndex = selectedAreaIndex;
            console.log('üîç Current selectedAreaIndex:', currentAreaIndex);
            console.log('üîç DisplayAreas originalIndexes:', displayAreas.map(a => ({name: a.name, originalIndex: a.originalIndex})).slice(0, 3));
            
            // HTML„ÇíÊõ¥Êñ∞
            if (select) {
                const previousValue = select.value;
                select.innerHTML = optionsHtml;
                // ÁèæÂú®ÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÇãÁâ©‰ª∂„ÇíÊñ∞„Åó„ÅÑ„ÇΩ„Éº„ÉàÈ†Ü„ÅßË¶ã„Å§„Åë„Çã
                const newIndex = displayAreas.findIndex(area => 
                    (area.originalIndex !== undefined ? area.originalIndex : areas.indexOf(area)) === currentAreaIndex
                );
                console.log('üîç Individual dropdown: previousValue=', previousValue, 'newIndex=', newIndex);
                if (newIndex !== -1) {
                    select.value = newIndex;
                } else {
                    select.value = '0'; // „Éá„Éï„Ç©„É´„Éà„ÅßÊúÄÂàù„ÇíÈÅ∏ÊäûÔºàÊñáÂ≠óÂàó„Å®„Åó„Å¶Ë®≠ÂÆöÔºâ
                }
                console.log('üîç Individual dropdown after update: value=', select.value);
            }
            if (rankingSelect) {
                const previousValue = rankingSelect.value;
                rankingSelect.innerHTML = optionsHtml;
                const newIndex = displayAreas.findIndex(area => 
                    (area.originalIndex !== undefined ? area.originalIndex : areas.indexOf(area)) === currentAreaIndex
                );
                console.log('üîç Ranking dropdown: previousValue=', previousValue, 'newIndex=', newIndex);
                if (newIndex !== -1) {
                    rankingSelect.value = newIndex.toString();
                } else {
                    rankingSelect.value = '0';
                }
                console.log('üîç Ranking dropdown after update: value=', rankingSelect.value);
            }
            if (compareSelect) {
                const previousValue = compareSelect.value;
                compareSelect.innerHTML = optionsHtml;
                const newIndex = displayAreas.findIndex(area => 
                    (area.originalIndex !== undefined ? area.originalIndex : areas.indexOf(area)) === currentAreaIndex
                );
                console.log('üîç Compare dropdown: previousValue=', previousValue, 'newIndex=', newIndex);
                if (newIndex !== -1) {
                    compareSelect.value = newIndex.toString();
                } else {
                    compareSelect.value = '0';
                }
                console.log('üîç Compare dropdown after update: value=', compareSelect.value);
            }
            
            // „É¢„Éê„Ç§„É´Áî®„ÅÆ„ÉÅ„ÉÉ„Éó„ÇÇÊõ¥Êñ∞
            updateMobileChips();
        }
        
        // „É¢„Éê„Ç§„É´Áî®„ÉÅ„ÉÉ„Éó„ÇíÂãïÁöÑÁîüÊàê
        function updateMobileChips() {
            const container = document.getElementById('propertyChips');
            if (!container) return;
            
            const displayAreas = sortedAreas.length > 0 ? sortedAreas : areas;
            
            // ÊúÄÂàù„ÅÆ5‰ª∂„ÅÆ„Åø„ÉÅ„ÉÉ„Éó„Å®„Åó„Å¶Ë°®Á§∫
            container.innerHTML = displayAreas.slice(0, 5).map((area, index) => 
                `<div class="property-chip ${index === 0 ? 'active' : ''}" 
                      onclick="selectPropertyMobile(${index})">
                    ${area.name.split(' ')[0]}
                </div>`
            ).join('');
        }
        
        // ========================================
        // „Éò„É´„Éë„ÉºÈñ¢Êï∞
        // ========================================
        function parseRent(rentString) {
            if (typeof rentString === 'number') return rentString;
            // "280,000ÂÜÜ" -> 280000
            const cleaned = rentString.replace(/[^0-9]/g, '');
            return parseInt(cleaned) || 0;
        }
        
        // ========================================
        // Áä∂ÊÖãÁÆ°ÁêÜ
        // ========================================
        let selectedAreaIndex = 0;
        let currentViewMode = 'single';
        let currentSortOrder = 'time_desc';  // „ÇΩ„Éº„ÉàÈ†Ü„ÇíËøΩÂä†
        let sortedAreas = [];  // „ÇΩ„Éº„ÉàÊ∏à„ÅøÈÖçÂàó„Çí‰øùÊåÅ
        let zoomScale = 2.0;  // „Éá„Éï„Ç©„É´„Éà„Çí2.0Ôºà200%Ôºâ„Å´Â§âÊõ¥
        let offsetX = 0;
        let offsetY = 0;
        let isDragging = false;
        let dragStartX = 0;
        let dragStartY = 0;
        let lastOffsetX = 0;
        let lastOffsetY = 0;
        let bottomSheetExpanded = false;
        // „Çø„ÉÉ„ÉÅ„Ç§„Éô„É≥„ÉàÁî®„ÅÆÁä∂ÊÖãÂ§âÊï∞
        let lastTouchX = 0;
        let lastTouchY = 0;
        let initialPinchDistance = 0;
        let lastZoomScale = 0;
        let pinchStartX = 0;
        let pinchStartY = 0;
        let isPinching = false;
        
        // ========================================
        // „É°„Ç§„É≥ÊèèÁîªÈñ¢Êï∞
        // ========================================
        function drawBackground() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Á¥îÁ≤ã„Å™ÈªíËÉåÊôØ
            ctx.fillStyle = '#000';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // ÁèæÂú®„ÅÆÁâ©‰ª∂„ÅÆÊúÄÂ§ßÁßªÂãïÊôÇÈñì„ÇíÂèñÂæóÔºàÂÖÉ„ÅÆÈÖçÂàó„Åã„ÇâÁõ¥Êé•ÂèñÂæóÔºâ
            const currentArea = areas[selectedAreaIndex];
            let maxTime = 0;
            currentArea.routes.forEach(route => {
                if (route.total > maxTime) {
                    maxTime = route.total;
                }
            });
            
            // 10ÂàÜÂçò‰Ωç„ÅßÂàá„Çä‰∏ä„ÅíÔºàÊúÄÂ∞è40ÂàÜ„ÄÅÊúÄÂ§ß80ÂàÜÔºâ
            const maxCircleTime = Math.max(40, Math.min(80, Math.ceil(maxTime / 10) * 10 + 10));
            
            // Â§âÊèõ„ÇíÈÅ©Áî®
            ctx.save();
            ctx.translate(canvas.width / 2 + offsetX, canvas.height / 2 + offsetY);
            ctx.scale(zoomScale, zoomScale);
            
            // ÂêåÂøÉÂÜÜÔºàÊôÇÈñì„ÅÆÁõÆÂÆâÔºâ
            for (let minutes = 5; minutes <= maxCircleTime; minutes += 5) {
                const radius = minutes * 10; // „Çπ„Ç±„Éº„É´Ë™øÊï¥Ôºà30ÂàÜ„ÅåÁîªÈù¢„ÅÆÁ´Ø„Å´Êù•„Çã„Çà„ÅÜ„Å´Ôºâ
                
                // 10ÂàÜÂàª„Åø„ÅØÂÆüÁ∑ö„ÄÅ5ÂàÜÂàª„Åø„ÅØÁÇπÁ∑ö
                if (minutes % 10 === 0) {
                    ctx.strokeStyle = 'rgba(255, 255, 255, 0.15)'; // Â∞ë„ÅóÊøÉ„Åè
                    ctx.setLineDash([]); // ÂÆüÁ∑ö
                } else {
                    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
                    ctx.setLineDash([5, 5]); // ÁÇπÁ∑ö
                }
                
                ctx.beginPath();
                ctx.arc(0, 0, radius, 0, Math.PI * 2);
                ctx.stroke();
                
                // 10ÂàÜÂàª„Åø„ÅÆ„Åø„É©„Éô„É´Ë°®Á§∫Ôºà4ÊñπÂêëÔºâ
                if (minutes % 10 === 0) {
                    ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
                    ctx.font = '10px sans-serif'; // „Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫„ÇíÂ∞è„Åï„Åè
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    
                    // Âè≥
                    ctx.fillText(minutes + 'ÂàÜ', radius, 0);
                    // Â∑¶
                    ctx.fillText(minutes + 'ÂàÜ', -radius, 0);
                    // ‰∏ä
                    ctx.save();
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';
                    ctx.fillText(minutes + 'ÂàÜ', 0, -radius);
                    ctx.restore();
                    // ‰∏ã
                    ctx.save();
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'top';
                    ctx.fillText(minutes + 'ÂàÜ', 0, radius);
                    ctx.restore();
                }
            }
            
            ctx.setLineDash([]);
            
            // ÊîæÂ∞ÑÁä∂„ÅÆÁ∑öÔºàÊñπÂêë„ÅÆÁõÆÂÆâÔºâ- ÊúÄÂ§ßÂÜÜ„Åæ„ÅßÂª∂Èï∑
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.05)';
            const maxRadius = maxCircleTime * 10 + 50; // „Çπ„Ç±„Éº„É´Ë™øÊï¥
            for (let i = 0; i < 12; i++) {
                const angle = (i * 30) * Math.PI / 180;
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(Math.cos(angle) * maxRadius, Math.sin(angle) * maxRadius);
                ctx.stroke();
            }
            
            ctx.restore();
        }
        
        function drawElements() {
            // ÂÄãÂà•„Éì„É•„Éº‰ª•Â§ñ„Åß„ÅØÂÆüË°å„Åó„Å™„ÅÑ
            if (currentViewMode !== 'single') return;
            
            // Êó¢Â≠ò„ÅÆË¶ÅÁ¥†„ÇíÂâäÈô§
            document.querySelectorAll('.destination-marker, .destination-label, .home-marker, .route-segment').forEach(el => el.remove());
            
            const centerX = canvas.width / 2 + offsetX;
            const centerY = canvas.height / 2 + offsetY;
            const scale = zoomScale;
            
            // „Éõ„Éº„É†„Éû„Éº„Ç´„ÉºÔºà‰∏≠ÂøÉÔºâ
            const homeMarker = document.createElement('div');
            homeMarker.className = 'home-marker';
            homeMarker.style.left = centerX + 'px';
            homeMarker.style.top = centerY + 'px';
            document.getElementById('container').appendChild(homeMarker);
            
            // ÁõÆÁöÑÂú∞„Éû„Éº„Ç´„Éº„Å®ÁµåË∑ØÔºàÂÖÉ„ÅÆÈÖçÂàó„Åã„ÇâÁõ¥Êé•ÂèñÂæóÔºâ
            const area = areas[selectedAreaIndex];
            
            area.routes.forEach((route) => {
                const dest = destinations[route.dest];
                const time = route.total;
                
                // archiveÁâà„ÅÆË®àÁÆóÊñπÊ≥ï„ÇíÊ≠£Á¢∫„Å´ÂÜçÁèæÔºà„Çπ„Ç±„Éº„É´Ë™øÊï¥Ôºâ
                const angle = dest.angle * Math.PI / 180;
                const distance = time * 10; // ÊôÇÈñìË∑ùÈõ¢„ÅÆË®àÁÆóÔºà30ÂàÜÂúèÂÜÖ„ÅåÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã„Çπ„Ç±„Éº„É´Ôºâ
                
                const totalDistance = distance * scale;
                const x = centerX + Math.cos(angle) * totalDistance;
                const y = centerY + Math.sin(angle) * totalDistance;
                
                // ÁµåË∑Ø„Çª„Ç∞„É°„É≥„Éà„ÇíÊèèÁîªÔºà„Éû„Éº„Ç´„Éº„Çà„ÇäÂÖà„Å´ÊèèÁîª„Åó„Å¶‰∏ãÂ±§„Å´Ôºâ
                drawRouteSegments(route, dest, angle, totalDistance, centerX, centerY);
                
                // „Éû„Éº„Ç´„ÉºÔºàborder„ÇíÂê´„ÇÅ„ÅüÂÖ®‰Ωì„Çµ„Ç§„Ç∫„ÅØ20pxÔºâ
                const marker = document.createElement('div');
                marker.className = 'destination-marker';
                if (dest.owner === 'partner') marker.classList.add('partner');
                if (dest.owner === 'shared' || dest.owner === 'both') marker.classList.add('shared');
                
                // „Éû„Éº„Ç´„Éº„ÅÆ‰∏≠ÂøÉ„ÇíÁ∑öÂàÜ„ÅÆÁµÇÁ´Ø„Å´Ê≠£Á¢∫„Å´ÈÖçÁΩÆ
                marker.style.left = x + 'px';
                marker.style.top = y + 'px';
                
                // „É©„Éô„É´
                const label = document.createElement('div');
                label.className = 'destination-label';
                label.textContent = dest.name;
                label.style.left = x + 'px';
                label.style.top = y + 'px';
                
                // „Éû„Éº„Ç´„Éº„ÅÆ„Éõ„Éê„Éº„Ç§„Éô„É≥„Éà
                marker.onmouseover = (e) => showTimeInfo(e, route, dest);
                marker.onmouseout = hideTimeInfo;
                
                document.getElementById('container').appendChild(marker);
                document.getElementById('container').appendChild(label);
            });
        }
        
        function drawRouteSegments(route, dest, angle, totalDistance, centerX, centerY) {
            let segments = [];
            
            // „Éû„Éº„Ç´„Éº„ÅÆÂçäÂæÑ„ÇíËÄÉÊÖÆ„Åó„ÅüÁ∑öÂàÜ„ÅÆÁµÇÁ´Ø‰ΩçÁΩÆ
            const markerRadius = 10; // „Éû„Éº„Ç´„Éº„ÅÆÂÆüÈöõ„ÅÆÂçäÂæÑÔºà16px/2 + border 2pxÔºâ
            const lineEndDistance = totalDistance - markerRadius;
            
            // „Çª„Ç∞„É°„É≥„Éà„ÅÆÊßãÁØâ
            if (!route.lines || route.lines.length === 0) {
                // ÂæíÊ≠©„ÅÆ„Åø„Åæ„Åü„ÅØ„Éá„Éº„Çø‰∏çË∂≥„ÅÆÂ†¥Âêà
                segments.push({type: 'walk', duration: route.total, color: 'walk'});
            } else {
                // ÈßÖ„Åæ„Åß„ÅÆÂæíÊ≠©
                if (route.walk > 0) {
                    segments.push({type: 'walk', duration: route.walk, color: 'walk'});
                }
                
                // Êñ∞ÂΩ¢Âºè„ÉÅ„Çß„ÉÉ„ÇØÔºà‰πóÊèõÊÉÖÂ†±„ÅåÂÄãÂà•„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„ÇãÔºâ
                const hasDetailedTransfers = route.lines.some(segment => segment.type === 'transfer');
                
                if (hasDetailedTransfers) {
                    // Êñ∞ÂΩ¢Âºè: ÈõªËªä„Å®‰πóÊèõ„Åå‰∫§‰∫í„Å´ÂÖ•„Å£„Å¶„ÅÑ„Çã
                    route.lines.forEach(segment => {
                        if (segment.type === 'transfer') {
                            segments.push({
                                type: 'transfer',
                                duration: segment.time,
                                color: 'transfer',
                                from_line: segment.from_line,
                                to_line: segment.to_line
                            });
                        } else {
                            segments.push({
                                type: 'train',
                                duration: segment.time,
                                color: 'train',
                                line: segment.name
                            });
                        }
                    });
                } else {
                    // ÊóßÂΩ¢Âºè: ÈõªËªä„ÅÆÈÖçÂàó„Å®Á∑è‰πóÊèõÊôÇÈñì
                    route.lines.forEach((line, index) => {
                        segments.push({
                            type: 'train',
                            duration: line.time,
                            color: 'train',
                            line: line.name
                        });
                        
                        // ÊúÄÂæå„ÅÆÈõªËªä‰ª•Â§ñ„ÅÆÂæå„Å´‰πóÊèõ„ÇíÊåøÂÖ•
                        if (index < route.lines.length - 1 && route.transfer > 0) {
                            // Ë§áÊï∞‰πóÊèõ„ÅÆÂ†¥Âêà„ÅØÂùáÁ≠âÂâ≤„ÇäÔºà‰ªÆÔºâ
                            const transferTime = route.transfer / (route.lines.length - 1);
                            segments.push({
                                type: 'transfer',
                                duration: transferTime,
                                color: 'transfer'
                            });
                        }
                    });
                }
                
                // ÈßÖ„Åã„Çâ„ÅÆÂæíÊ≠©
                if (route.walk2 > 0) {
                    segments.push({type: 'walk', duration: route.walk2, color: 'walk'});
                }
            }
            
            // „Çª„Ç∞„É°„É≥„Éà„ÇíDOMË¶ÅÁ¥†„Å®„Åó„Å¶ÊèèÁîª
            let currentPos = 0;
            const gap = 2;
            const activeSegments = segments.filter(s => s.duration > 0);
            const totalGaps = Math.max(0, activeSegments.length - 1) * gap;
            const adjustedTotalDistance = lineEndDistance - totalGaps; // „Éû„Éº„Ç´„ÉºÂçäÂæÑ„Å®„ÇÆ„É£„ÉÉ„Éó„ÇíËÄÉÊÖÆ
            
            segments.forEach((segment, idx) => {
                if (segment.duration > 0) {
                    const segmentLength = (segment.duration / route.total) * adjustedTotalDistance;
                    const startX = centerX + Math.cos(angle) * currentPos;
                    const startY = centerY + Math.sin(angle) * currentPos;
                    
                    const div = document.createElement('div');
                    div.className = `route-segment ${segment.color}`;
                    
                    // ÂÖ±ÊúâË∑ØÁ∑ö„ÅØÈùíÁ≥ª„ÅÆËâ≤„ÅßÁµ±‰∏ÄÔºàÁ∑ëËâ≤„ÇíÂªÉÊ≠¢Ôºâ
                    if (dest.owner === 'shared' && segment.type === 'train') {
                        // shared„ÇØ„É©„Çπ„ÅØËøΩÂä†„Åõ„Åö„ÄÅÈÄöÂ∏∏„ÅÆÈõªËªä„ÅÆËâ≤„Çí‰ΩøÁî®
                        div.style.opacity = '1';
                    }
                    
                    div.style.left = startX + 'px';
                    div.style.top = startY + 'px';
                    div.style.width = Math.max(segmentLength, 5) + 'px';
                    div.style.transform = `rotate(${angle}rad) translateY(-4px)`;
                    
                    // „ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó
                    if (segment.type === 'walk') {
                        div.title = `ÂæíÊ≠©: ${segment.duration}ÂàÜ`;
                    } else if (segment.type === 'train') {
                        div.title = `${segment.line}: ${segment.duration}ÂàÜ`;
                    } else {
                        div.title = `‰πó„ÇäÊèõ„Åà: ${segment.duration}ÂàÜ`;
                    }
                    
                    document.getElementById('container').appendChild(div);
                    
                    currentPos += segmentLength;
                    // ÊúÄÂæå„ÅÆ„Çª„Ç∞„É°„É≥„Éà‰ª•Â§ñ„ÅØ„ÇÆ„É£„ÉÉ„Éó„ÇíËøΩÂä†
                    const activeIndex = activeSegments.indexOf(segment);
                    if (activeIndex < activeSegments.length - 1) {
                        currentPos += gap;
                    }
                }
            });
        }
        
        function showTimeInfo(e, route, dest) {
            const info = document.getElementById('timeInfo');
            let content = `<strong>${dest.name}</strong><br>`;
            content += `ÂêàË®à: ${route.total}ÂàÜ<br><br>`;
            
            if (route.lines.length === 0) {
                content += `ÂæíÊ≠©„ÅÆ„Åø: ${route.walk}ÂàÜ`;
            } else {
                content += `ÂæíÊ≠©ÔºàÂÆ∂‚ÜíÈßÖÔºâ: ${route.walk}ÂàÜ<br>`;
                route.lines.forEach((line, i) => {
                    content += `${line.name}: ${line.time}ÂàÜ<br>`;
                    if (i < route.lines.length - 1 && route.transfer) {
                        content += `‰πó„ÇäÊèõ„Åà: ${route.transfer}ÂàÜ<br>`;
                    }
                });
                if (route.walk2 > 0) {
                    content += `ÂæíÊ≠©ÔºàÈßÖ‚ÜíÁõÆÁöÑÂú∞Ôºâ: ${route.walk2}ÂàÜ`;
                }
            }
            
            info.innerHTML = content;
            info.style.display = 'block';
            info.style.left = e.pageX + 15 + 'px';
            info.style.top = e.pageY + 15 + 'px';
        }
        
        function hideTimeInfo() {
            document.getElementById('timeInfo').style.display = 'none';
        }
        
        // ========================================
        // UIÂà∂Âæ°
        // ========================================
        function setViewMode(mode, event) {
            currentViewMode = mode;
            
            // „Éì„É•„ÉºÂàá„ÇäÊõø„ÅàÊôÇ„Å´„ÇΩ„Éº„ÉàÈ†Ü„ÇíÂêåÊúü
            setTimeout(() => {
                const sortSelect = document.getElementById('sortOrder');
                const rankingSortSelect = document.getElementById('rankingSortOrder');
                const compareSortSelect = document.getElementById('compareSortOrder');
                
                // ÁèæÂú®„ÅÆ„ÇΩ„Éº„ÉàÈ†Ü„ÇíÊñ∞„Åó„ÅÑ„Éì„É•„Éº„ÅÆ„Çª„É¨„ÇØ„Éà„Éú„ÉÉ„ÇØ„Çπ„Å´ÂèçÊò†
                if (sortSelect) sortSelect.value = currentSortOrder;
                if (rankingSortSelect) rankingSortSelect.value = currentSortOrder;
                if (compareSortSelect) compareSortSelect.value = currentSortOrder;
            }, 100);
            
            // Êó¢Â≠ò„ÅÆDOMË¶ÅÁ¥†„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
            document.querySelectorAll('.destination-marker, .destination-label, .home-marker, .route-segment').forEach(el => el.remove());
            
            // „Éì„É•„Éº„ÇíÂàá„ÇäÊõø„Åà
            document.querySelectorAll('.view-container').forEach(v => v.classList.remove('active'));
            document.getElementById(mode + 'View').classList.add('active');
            
            // „Éú„Çø„É≥„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÁä∂ÊÖã„ÇíÊõ¥Êñ∞
            document.querySelectorAll('.view-mode-btn').forEach(btn => btn.classList.remove('active'));
            if (event && event.target) {
                event.target.classList.add('active');
            }
            
            // „Ç≠„É£„É≥„Éê„Çπ„Çí„ÇØ„É™„Ç¢
            if (ctx) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            }
            
            // ÂêÑ„Éì„É•„Éº„ÇíÊõ¥Êñ∞
            if (mode === 'compare') {
                updateCompareView();
            } else if (mode === 'ranking') {
                updateRankingView();
            } else if (mode === 'single') {
                animate();
            }
            
            // CRITICAL FIX: „Éó„É≠„Éë„ÉÜ„Ç£„Çª„É¨„ÇØ„Çø„ÇíÊõ¥Êñ∞Ôºà„ÇΩ„Éº„ÉàÊ∏à„ÅøÈÖçÂàó„ÇíÂèçÊò†Ôºâ- „Éì„É•„ÉºÊõ¥Êñ∞Âæå„Å´ÂÆüË°å
            updatePropertySelector();
            
            // „Éì„É•„ÉºÂàá„ÇäÊõø„ÅàÊôÇ„Å´Á¢∫ÂÆü„Å´ÈÅ∏ÊäûÂÄ§„ÇíË®≠ÂÆö
            let targetSelect;
            if (mode === 'ranking') {
                targetSelect = document.getElementById('rankingAreaSelect');
            } else if (mode === 'compare') {
                targetSelect = document.getElementById('compareAreaSelect');
            } else {
                targetSelect = document.getElementById('areaSelect');
            }
            
            if (targetSelect && (targetSelect.value === '' || targetSelect.value === null)) {
                targetSelect.value = '0';
                console.log('üéØ View switch: Set default selection for', mode, 'view');
            }
            
            // CRITICAL FIX: ËøΩÂä†„ÅÆÈÅÖÂª∂Êõ¥Êñ∞„ÅßÁ¢∫ÂÆü„Å´ÂêåÊúü
            setTimeout(() => {
                updatePropertySelector();
                console.log('üîÑ View switch: Dropdowns synchronized');
            }, 50);
        }
        
        function calculateMonthlyTimes(area) {
            let totalTime = 0;
            let totalWalkTime = 0;
            
            area.routes.forEach((route, index) => {
                const dest = destinations[route.dest];
                const frequency = dest.frequency || 1;
                
                // ÂæÄÂæ©„Åß2ÂÄç
                totalTime += route.total * frequency * 2;
                
                // ÂæíÊ≠©ÊôÇÈñì„ÅÆË®àÁÆó
                const walkTime = route.walk + (route.walk2 || 0);
                totalWalkTime += walkTime * frequency * 2;
            });
            
            return { totalTime, totalWalkTime };
        }
        
        function updateSelectedArea() {
            // ÁèæÂú®„ÅÆ„Éì„É•„Éº„É¢„Éº„Éâ„Å´Âøú„Åò„Å¶Ê≠£„Åó„ÅÑ„Çª„É¨„ÇØ„Éà„Éú„ÉÉ„ÇØ„Çπ„Åã„ÇâÂÄ§„ÇíÂèñÂæó
            let selectElement;
            if (currentViewMode === 'ranking') {
                selectElement = document.getElementById('rankingAreaSelect');
            } else if (currentViewMode === 'compare') {
                selectElement = document.getElementById('compareAreaSelect');
            } else {
                selectElement = document.getElementById('areaSelect');
            }
            
            if (!selectElement || selectElement.value === '') {
                console.log('‚ö†Ô∏è No select element or empty value in', currentViewMode, 'view');
                return;
            }
            
            const selectIndex = parseInt(selectElement.value);
            const displayAreas = sortedAreas.length > 0 ? sortedAreas : areas;
            
            // „ÇΩ„Éº„ÉàÂæå„ÅÆÈÖçÂàó„Åã„ÇâÁâ©‰ª∂„ÇíÂèñÂæó„Åó„ÄÅ„Åù„ÅÆÂÖÉ„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Çí‰øùÊåÅ
            const selectedArea = displayAreas[selectIndex];
            if (!selectedArea) {
                console.log('‚ö†Ô∏è No area found at index', selectIndex);
                return;
            }
            
            selectedAreaIndex = selectedArea.originalIndex !== undefined ? selectedArea.originalIndex : selectIndex;
            console.log('‚úÖ Selected area:', selectedArea.name, 'originalIndex:', selectedAreaIndex);
            
            updateAreaInfo();
            animate();
        }
        
        function updateSortOrder() {
            // „Åô„Åπ„Å¶„ÅÆ„Éì„É•„Éº„ÅÆ„Çª„É¨„ÇØ„Éà„Éú„ÉÉ„ÇØ„Çπ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            const sortSelect = document.getElementById('sortOrder');
            const rankingSortSelect = document.getElementById('rankingSortOrder');
            const compareSortSelect = document.getElementById('compareSortOrder');
            
            // ÁèæÂú®„ÅÆ„Éì„É•„Éº„Å´Âü∫„Å•„ÅÑ„Å¶Ê≠£„Åó„ÅÑ„Çª„É¨„ÇØ„Éà„Åã„ÇâÂÄ§„ÇíÂèñÂæó
            if (currentViewMode === 'ranking' && rankingSortSelect) {
                currentSortOrder = rankingSortSelect.value;
            } else if (currentViewMode === 'compare' && compareSortSelect) {
                currentSortOrder = compareSortSelect.value;
            } else if (sortSelect) {
                currentSortOrder = sortSelect.value;
            }
            
            console.log('üîÑ updateSortOrder called from', currentViewMode, 'view. New sort order:', currentSortOrder);
            console.log('üìç Current view mode:', currentViewMode);
            console.log('üìç Sort dropdowns found:', {
                individual: !!sortSelect,
                ranking: !!rankingSortSelect,
                compare: !!compareSortSelect
            });
            
            // „Åô„Åπ„Å¶„ÅÆ„Çª„É¨„ÇØ„Éà„Éú„ÉÉ„ÇØ„Çπ„ÇíÂêåÊúü
            if (sortSelect) sortSelect.value = currentSortOrder;
            if (rankingSortSelect) rankingSortSelect.value = currentSortOrder;
            if (compareSortSelect) compareSortSelect.value = currentSortOrder;
            
            sortedAreas = sortAreas();
            console.log('üìä Sorted order:', sortedAreas.map((a, i) => {
                const times = calculateMonthlyTimes(a);
                const rent = parseRent(a.rent);
                return `${i+1}. ${a.name} (¬•${rent.toLocaleString()}, ${Math.round(times.totalTime)}ÂàÜ/Êúà, ÂæíÊ≠©${Math.round(times.totalWalkTime)}ÂàÜ/Êúà)`;
            }));
            
            // CRITICAL FIX: Update property selectors FIRST
            updatePropertySelector();
            
            // Âº∑Âà∂ÁöÑ„Å´ÂÖ®„Éì„É•„Éº„ÇíÊõ¥Êñ∞
            updateAreaInfo();
            if (currentViewMode === 'ranking') {
                console.log('üèÜ FORCING ranking view update with new sort order:', currentSortOrder);
                updateRankingView(); // Direct call instead of updateRanking() for immediate refresh
            } else if (currentViewMode === 'compare') {
                console.log('üìä FORCING compare view update with new sort order:', currentSortOrder);
                updateCompareView();
            }
            
            // CRITICAL FIX: Update property selectors AGAIN after view updates to ensure they stick
            setTimeout(() => {
                updatePropertySelector();
                console.log('üîÑ Dropdown re-synchronized after view update');
            }, 50);
            
            animate();
        }
        
        function updateAreaInfo() {
            // ÂÖÉ„ÅÆÈÖçÂàó„Åã„ÇâÁõ¥Êé•ÂèñÂæóÔºàselectedAreaIndex„ÅØÂÖÉ„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÔºâ
            const area = areas[selectedAreaIndex];
            const { totalTime, totalWalkTime } = calculateMonthlyTimes(area);
            
            // ÊôÇÈñì„ÇíË™≠„Åø„ÇÑ„Åô„ÅÑÂΩ¢Âºè„Å´
            const formatTime = (minutes) => {
                const hours = Math.floor(minutes / 60);
                const mins = minutes % 60;
                return hours > 0 ? `${hours}ÊôÇÈñì${mins}ÂàÜ` : `${mins}ÂàÜ`;
            };
            
            // ÁõÆÁöÑÂú∞„ÇíÊåáÂÆöÈ†ÜÂ∫è„Åß‰∏¶„Åπ„ÇãÔºàËá≥ÂñÑÈ§®„ÄÅÊù±‰∫¨„Ç¢„É°„É™„Ç´„É≥„ÇØ„É©„Éñ„ÄÅYawara„ÄÅ„Åù„ÅÆÂæå„ÅØÈ†ªÂ∫¶È†ÜÔºâ
            const priorityOrder = ['Ëá≥ÂñÑÈ§®', 'Êù±‰∫¨„Ç¢„É°„É™„Ç´„É≥„ÇØ„É©„Éñ', 'YawaraÔºàÊ∏ãË∞∑Ôºâ'];
            
            const destinationsWithFreq = destinations.map((dest, index) => ({
                name: dest.name,
                index: index,
                frequency: dest.frequency,
                owner: dest.owner
            })).sort((a, b) => {
                // ÂÑ™ÂÖàÈ†Ü‰Ωç„É™„Çπ„Éà„Å´„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Åù„ÅÆÈ†ÜÂ∫è„Åß
                const aPriority = priorityOrder.indexOf(a.name);
                const bPriority = priorityOrder.indexOf(b.name);
                
                if (aPriority !== -1 && bPriority !== -1) {
                    return aPriority - bPriority;
                }
                if (aPriority !== -1) return -1;
                if (bPriority !== -1) return 1;
                
                // „Åù„Çå‰ª•Â§ñ„ÅØÈ†ªÂ∫¶È†Ü
                return b.frequency - a.frequency;
            });
            
            let destinationsList = '<div class="destinations-list">';
            destinationsList += '<div class="destinations-list-title">‰∏ªË¶ÅÁõÆÁöÑÂú∞„Å∏„ÅÆÁßªÂãïÊôÇÈñì</div>';
            destinationsWithFreq.forEach(dest => {
                const route = area.routes[dest.index];
                const ownerIcon = dest.owner === 'you' ? 'üî¥' : dest.owner === 'partner' ? 'üü¢' : 'üü°';
                destinationsList += `
                    <div class="destination-item">
                        <span class="name">${ownerIcon} ${dest.name}:</span>
                        <span class="time">${route.total}ÂàÜ</span>
                    </div>
                `;
            });
            destinationsList += '</div>';
            
            // ÂÖ®„Éì„É•„Éº„ÅÆÁâ©‰ª∂ÊÉÖÂ†±„Ç´„Éº„Éâ„ÇíÂêå„ÅòÂÜÖÂÆπ„ÅßÊõ¥Êñ∞
            const areaInfoElements = [
                document.getElementById('areaInfo'),
                document.getElementById('rankingAreaInfo'), 
                document.getElementById('compareAreaInfo')
            ];
            
            areaInfoElements.forEach(info => {
                if (info) {
                    info.innerHTML = `
                        <div class="rent">ÂÆ∂Ë≥É: ${area.rent}</div>
                        <div class="stations">ÊúÄÂØÑÈßÖ: ${area.stations}</div>
                        <div class="total-time">ÊúàÈñìÁ∑èÁßªÂãïÊôÇÈñì: ${formatTime(Math.round(totalTime))}</div>
                        <div class="walk-time">„ÅÜ„Å°ÂæíÊ≠©ÊôÇÈñì: ${formatTime(Math.round(totalWalkTime))}</div>
                        ${destinationsList}
                    `;
                }
            });
            
            // „É¢„Éê„Ç§„É´Áî®
            if (document.getElementById('mobileRent')) {
                document.getElementById('mobileRent').textContent = `ÂÆ∂Ë≥É: ${area.rent}`;
                document.getElementById('mobileStation').textContent = `ÊúÄÂØÑÈßÖ: ${area.stations}`;
                document.getElementById('mobileTotalTime').textContent = `ÊúàÈñìÁ∑èÁßªÂãïÊôÇÈñì: ${formatTime(Math.round(totalTime))}`;
                document.getElementById('mobileWalkTime').textContent = `„ÅÜ„Å°ÂæíÊ≠©ÊôÇÈñì: ${formatTime(Math.round(totalWalkTime))}`;
            }
        }
        
        function updateCompareView() {
            const compareContent = document.getElementById('compareContent');
            
            // Áâ©‰ª∂ÊÉÖÂ†±„Ç´„Éº„Éâ„ÅØ updateAreaInfo „ÅßÊõ¥Êñ∞„Åï„Çå„Çã
            updateAreaInfo();
            
            // ÂÖ®ÁõÆÁöÑÂú∞„ÇíÈ†ªÂ∫¶È†Ü„Å´„ÇΩ„Éº„Éà
            const importantDestinations = destinations
                .map((dest, index) => ({ 
                    dest, 
                    index, 
                    frequency: dest.frequency 
                }))
                .sort((a, b) => b.frequency - a.frequency);
            
            let html = '';
            
            importantDestinations.forEach(destInfo => {
                const dest = destInfo.dest;
                const destIndex = destInfo.index;
                
                // ÂêÑÁâ©‰ª∂„ÅÆÊôÇÈñì„ÇíÂèñÂæóÔºà„ÇΩ„Éº„ÉàÊ∏à„Åø„Éá„Éº„Çø„Çí‰ΩøÁî®Ôºâ
                const displayAreas = sortedAreas.length > 0 ? sortedAreas : areas;
                const times = displayAreas.map(area => {
                    const route = area.routes[destIndex];
                    return { area, route, total: route.total };
                });
                
                // ÊúÄÁü≠ÊôÇÈñì„ÇíË¶ã„Å§„Åë„Çã
                const minTime = Math.min(...times.map(t => t.total));
                const maxTime = 45; // ÊúÄÂ§ß45ÂàÜ„ÅÆ„Çπ„Ç±„Éº„É´
                
                // È†ªÂ∫¶„ÅÆË°®Á§∫ÂΩ¢Âºè
                const freqText = destInfo.frequency >= 4.4 ? 
                    `ÈÄ±${Math.round(destInfo.frequency / 4.4)}Âõû` : 
                    `Êúà${Math.round(destInfo.frequency)}Âõû`;
                
                html += `
                    <div class="destination-comparison">
                        <div class="destination-header">
                            <div class="destination-name">${dest.name}</div>
                            <div class="destination-frequency">${freqText}</div>
                        </div>
                        <div class="time-axis">
                            <div class="axis-labels">
                                <span>0ÂàÜ</span>
                                <span>15ÂàÜ</span>
                                <span>30ÂàÜ</span>
                                <span>45ÂàÜ</span>
                            </div>
                `;
                
                // ÁèæÂú®„ÅÆÁâ©‰ª∂„Å®ÊúÄÈÄü3„Å§„ÇíË°®Á§∫Ôºà„ÇΩ„Éº„ÉàÊ∏à„Åø„Éá„Éº„Çø„Çí‰ΩøÁî®Ôºâ
                // „Åæ„Åö„ÄÅÁèæÂú®ÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÇãÁâ©‰ª∂„ÇíÂèñÂæóÔºàÂÖÉ„ÅÆareas„Åã„ÇâÔºâ
                const selectedArea = areas[selectedAreaIndex];
                
                // ÂÖ®Áâ©‰ª∂„ÅÆÊôÇÈñì„ÇíÂèñÂæó„Åó„ÄÅÁèæÂú®„ÅÆÁâ©‰ª∂„ÇíÂÑ™ÂÖàË°®Á§∫
                const allAreaTimes = displayAreas.map(area => ({
                    area,
                    route: area.routes[destIndex],
                    time: area.routes[destIndex].total,
                    isSelected: (area.originalIndex !== undefined && area.originalIndex === selectedAreaIndex) || 
                               (area.originalIndex === undefined && area.name === selectedArea.name)
                }));
                
                // ÁèæÂú®„ÅÆÁâ©‰ª∂„ÇíÊúÄÂàù„Å´Ë°®Á§∫
                const currentAreaTime = allAreaTimes.find(item => item.isSelected) || allAreaTimes[0];
                html += generateTimeBar(currentAreaTime.area.name, currentAreaTime.route, currentAreaTime.time === minTime, true, maxTime);
                
                // ‰ªñ„ÅÆÁâ©‰ª∂„ÇíË°®Á§∫ÔºàÁèæÂú®„ÅÆÁâ©‰ª∂„ÇíÈô§„ÅÑ„ÅüÊúÄÂàù„ÅÆ3„Å§„ÄÅ„ÇΩ„Éº„ÉàÈ†ÜÔºâ
                const otherAreas = allAreaTimes
                    .filter(item => !item.isSelected)
                    .slice(0, 3);
                
                otherAreas.forEach(item => {
                    const route = item.area.routes[destIndex];
                    html += generateTimeBar(item.area.name, route, route.total === minTime, false, maxTime);
                });
                
                html += `
                        </div>
                    </div>
                `;
            });
            
            compareContent.innerHTML = html;
        }
        
        function generateTimeBar(label, route, isBest, isCurrent, maxTime) {
            const barWidth = (route.total / maxTime) * 100;
            let segments = '';
            
            // „Çª„Ç∞„É°„É≥„Éà„ÇíÊßãÁØâÔºàÊï¥ÂàóÊîπÂñÑÔºâ
            if (!route.lines || route.lines.length === 0) {
                // ÂæíÊ≠©„ÅÆ„Åø
                segments = `<div class="time-segment segment-walk" style="width: 100%;">${route.walk > 5 ? route.walk + 'ÂàÜ' : ''}</div>`;
            } else {
                const totalTime = route.total;
                let segmentHTML = '';
                
                // ÂæíÊ≠©ÔºàÈßÖ„Åæ„ÅßÔºâ
                if (route.walk > 0) {
                    const walkWidth = (route.walk / totalTime) * 100;
                    segmentHTML += `<div class="time-segment segment-walk" style="width: ${walkWidth}%;">${route.walk > 3 ? route.walk : ''}</div>`;
                }
                
                // ÈõªËªä„Å®‰πóÊèõ
                route.lines.forEach((line, i) => {
                    if (i > 0 && route.transfer && route.transfer > 0) {
                        const transferWidth = (route.transfer / totalTime) * 100;
                        segmentHTML += `<div class="time-segment segment-transfer" style="width: ${transferWidth}%;"></div>`;
                    }
                    const trainWidth = (line.time / totalTime) * 100;
                    segmentHTML += `<div class="time-segment segment-train" style="width: ${trainWidth}%;">${line.time > 5 ? line.time : ''}</div>`;
                });
                
                // ÂæíÊ≠©ÔºàÈßÖ„Åã„ÇâÔºâ
                if (route.walk2 > 0) {
                    const walkWidth = (route.walk2 / totalTime) * 100;
                    segmentHTML += `<div class="time-segment segment-walk" style="width: ${walkWidth}%;">${route.walk2 > 3 ? route.walk2 : ''}</div>`;
                }
                
                segments = segmentHTML;
            }
            
            return `
                <div class="property-comparison">
                    <div class="property-label ${isCurrent ? 'current' : ''}">${label}</div>
                    <div class="time-bar-container">
                        <span class="time-total">${route.total}ÂàÜ</span>
                        <div class="time-bar" style="width: ${barWidth}%;">
                            ${segments}
                        </div>
                        ${isBest ? '<span class="best-marker">‚ú®</span>' : ''}
                    </div>
                </div>
            `;
        }
        
        function drawMiniMap(canvasId, area) {
            // „Åì„ÅÆÈñ¢Êï∞„ÅØ‰∏çË¶Å„Å´„Å™„Å£„Åü„ÅÆ„ÅßÂâäÈô§
        }
        
        function updateRanking() {
            updateRankingView();
        }
        
        function updateRankingView() {
            const rankingList = document.getElementById('rankingList');
            if (!rankingList) {
                console.error('‚ùå rankingList element not found!');
                return;
            }
            console.log('üìã Found rankingList element');
            
            // Áâ©‰ª∂ÊÉÖÂ†±„Ç´„Éº„Éâ„ÅØ updateAreaInfo „ÅßÊõ¥Êñ∞„Åï„Çå„Çã
            updateAreaInfo();
            
            // „ÇΩ„Éº„ÉàÊ∏à„Åø„É™„Çπ„Éà„Çí‰ΩøÁî®Ôºà„É´„Éï„Ç©„É≥„Éó„É≠„Ç∞„É¨„ÅØÂ∏∏„Å´ÊúÄÂàùÔºâ
            const displayAreas = sortedAreas.length > 0 ? sortedAreas : areas;
            console.log('üèÜ updateRankingView: sortOrder=', currentSortOrder);
            console.log('üèÜ Using:', sortedAreas.length > 0 ? 'sortedAreas' : 'areas', `(${displayAreas.length} items)`);
            console.log('üèÜ Display order:', displayAreas.map((a, i) => `${i+1}.${a.name}`).slice(0, 3).join(', '), '...');
            console.log('üîç Creating rankedAreas from', displayAreas.length, 'sorted items');
            const rankedAreas = displayAreas.map((area, sortedIndex) => {
                const { totalTime, totalWalkTime } = calculateMonthlyTimes(area);
                
                // ÈõªËªäÊôÇÈñì„Å®‰πóÊèõÊôÇÈñì„ÇíË®àÁÆó
                let totalTrainTime = 0;
                let totalTransferTime = 0;
                area.routes.forEach((route) => {
                    const dest = destinations[route.dest];
                    const frequency = dest.frequency || 1;
                    
                    // ÈõªËªäÊôÇÈñì
                    if (route.lines) {
                        route.lines.forEach(line => {
                            totalTrainTime += line.time * frequency * 2; // ÂæÄÂæ©
                        });
                    }
                    
                    // ‰πóÊèõÊôÇÈñì
                    if (route.transfer) {
                        totalTransferTime += route.transfer * frequency * 2; // ÂæÄÂæ©
                    }
                });
                
                // originalIndex„ÅåÂ≠òÂú®„Åô„Çå„Å∞„Åù„Çå„Çí‰ΩøÁî®„ÄÅ„Å™„Åë„Çå„Å∞ÂÖÉ„ÅÆÈÖçÂàó„Åã„Çâ„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇíÁâπÂÆö
                const originalIndex = area.originalIndex !== undefined ? 
                    area.originalIndex : 
                    areas.findIndex(originalArea => originalArea.name === area.name);
                
                return { area, index: originalIndex, totalTime, totalWalkTime, totalTrainTime, totalTransferTime };
            });
            
            let html = '';
            
            // ÂÆ∂Ë≥É„ÇΩ„Éº„Éà„ÅÆÂ†¥Âêà
            if (currentSortOrder === 'rent_asc') {
                // ÂÆ∂Ë≥É„ÇíÊï∞ÂÄ§„Å´Â§âÊèõ„Åó„Å¶ÊúÄÂ§ßÂÄ§„ÇíÂèñÂæó
                const rents = rankedAreas.map(item => parseRent(item.area.rent));
                const maxRentRaw = Math.max(...rents);
                const minRent = Math.min(...rents);
                // ÊúÄÂ§ßÂÄ§„ÇíÂàá„Çä‰∏ä„ÅíÔºà10‰∏áÂÜÜÂçò‰ΩçÔºâ
                const maxRent = Math.ceil(maxRentRaw / 100000) * 100000;
                
                rankedAreas.forEach((item, rank) => {
                    const rentValue = parseRent(item.area.rent);
                    // ÊúÄÂ∞èÂÄ§„Çí20%„ÄÅÊúÄÂ§ßÂÄ§„Çí100%„Å´„Å™„Çã„Çà„ÅÜ„Å´„Çπ„Ç±„Éº„É´
                    const rentBarWidth = minRent === maxRent ? 100 : 
                        ((rentValue - minRent) / (maxRent - minRent)) * 80 + 20;
                    const hours = Math.floor(item.totalTime / 60);
                    const mins = Math.round(item.totalTime % 60);
                    
                    // „É°„ÉÄ„É´„Åæ„Åü„ÅØÈ†Ü‰ΩçÁï™Âè∑
                    const medal = rank === 0 ? 'ü•á' : rank === 1 ? 'ü•à' : rank === 2 ? 'ü•â' : '';
                    const currentClass = item.index === selectedAreaIndex ? 'current' : '';
                    
                    html += `
                        <div class="ranking-item ${currentClass}" onclick="selectFromRanking(${item.index})">
                            <div class="ranking-item-header">
                                ${medal ? `<span class="ranking-medal">${medal}</span>` : `<span class="ranking-number">${rank + 1}</span>`}
                                <span class="ranking-name">${item.area.name}</span>
                                <span class="ranking-time-total" style="color: #ffc107;">${item.area.rent}</span>
                            </div>
                            <div class="ranking-time-bar">
                                <div class="ranking-time-bar-fill" style="width: ${rentBarWidth}%; background: linear-gradient(90deg, #ffc107, #ffb300);">
                                    <span style="padding-left: 10px; font-size: 12px;">ÂÆ∂Ë≥É: ${item.area.rent}</span>
                                </div>
                            </div>
                            <div class="ranking-details">
                                <div class="ranking-detail-item">
                                    <span>ÊúàÈñìÁßªÂãï</span>
                                    <strong>${hours}h ${mins}m</strong>
                                </div>
                                <div class="ranking-detail-item">
                                    <span style="color: var(--color-walk);">ÂæíÊ≠©ÊôÇÈñì</span>
                                    <strong>${Math.floor(item.totalWalkTime / 60)}h ${Math.round(item.totalWalkTime % 60)}m</strong>
                                </div>
                                <div class="ranking-detail-item">
                                    <span>ÈßÖ„Åã„Çâ</span>
                                    <strong>${item.area.stationWalk || 'N/A'}ÂàÜ</strong>
                                </div>
                            </div>
                        </div>
                    `;
                });
            } else {
                // ÊôÇÈñì„ÇΩ„Éº„Éà„ÅÆÂ†¥ÂêàÔºàÊó¢Â≠ò„ÅÆÂá¶ÁêÜÔºâ
                // ÊúÄÂ§ßÊôÇÈñì„ÇíÂèñÂæó„Åó„Å¶Âàá„Çä‰∏ä„ÅíÔºà60ÂàÜÂçò‰ΩçÔºâ
                const maxTimeRaw = Math.max(...rankedAreas.map(item => item.totalTime));
                const maxTime = Math.ceil(maxTimeRaw / 60) * 60;
                
                rankedAreas.forEach((item, rank) => {
                    const hours = Math.floor(item.totalTime / 60);
                    const mins = Math.round(item.totalTime % 60);
                    const walkPercent = Math.round((item.totalWalkTime / item.totalTime) * 100);
                    const trainPercent = Math.round((item.totalTrainTime / item.totalTime) * 100);
                    const transferPercent = Math.round((item.totalTransferTime / item.totalTime) * 100);
                    const barWidth = (item.totalTime / maxTime) * 100;
                    const walkBarWidth = (item.totalWalkTime / item.totalTime) * 100;
                    const trainBarWidth = (item.totalTrainTime / item.totalTime) * 100;
                    const transferBarWidth = (item.totalTransferTime / item.totalTime) * 100;
                    
                    // „É°„ÉÄ„É´„Åæ„Åü„ÅØÈ†Ü‰ΩçÁï™Âè∑
                    const medal = rank === 0 ? 'ü•á' : rank === 1 ? 'ü•à' : rank === 2 ? 'ü•â' : '';
                    const currentClass = item.index === selectedAreaIndex ? 'current' : '';
                    
                    html += `
                    <div class="ranking-item ${currentClass}" onclick="selectFromRanking(${item.index})">
                        <div class="ranking-item-header">
                            ${medal ? `<span class="ranking-medal">${medal}</span>` : `<span class="ranking-number">${rank + 1}</span>`}
                            <span class="ranking-name">${item.area.name}</span>
                            <span class="ranking-time-total">${hours}h ${mins}m</span>
                        </div>
                        <div class="ranking-time-bar">
                            <div class="ranking-time-bar-fill" style="width: ${barWidth}%">
                                <div class="ranking-walk-bar" style="width: ${walkBarWidth}%; background: var(--color-walk-gradient);">
                                    ${walkPercent > 10 ? `ÂæíÊ≠© ${walkPercent}%` : ''}
                                </div>
                                ${item.totalTrainTime > 0 ? `
                                    <div class="ranking-train-bar" style="position: absolute; left: ${walkBarWidth}%; width: ${trainBarWidth}%; height: 100%; background: var(--color-train-gradient); opacity: 0.7; display: flex; align-items: center; padding-left: 6px;">
                                        ${trainPercent > 10 ? `<span style="font-size: 9px; color: white; font-weight: 600;">ÈõªËªä ${trainPercent}%</span>` : ''}
                                    </div>
                                ` : ''}
                                ${item.totalTransferTime > 0 ? `
                                    <div class="ranking-transfer-bar" style="position: absolute; left: ${walkBarWidth + trainBarWidth}%; width: ${transferBarWidth}%; height: 100%; background: var(--color-transfer-gradient); opacity: 0.6; display: flex; align-items: center; padding-left: 4px;">
                                        ${transferPercent > 5 ? `<span style="font-size: 8px; color: white;">‰πóÊèõ</span>` : ''}
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                        <div class="ranking-details">
                            <div class="ranking-detail-item">
                                <span style="color: var(--color-walk);">ÂæíÊ≠©</span>
                                <strong>${Math.floor(item.totalWalkTime / 60)}h ${Math.round(item.totalWalkTime % 60)}m</strong>
                            </div>
                            <div class="ranking-detail-item">
                                <span style="color: var(--color-train);">ÈõªËªä</span>
                                <strong>${Math.floor(item.totalTrainTime / 60)}h ${Math.round(item.totalTrainTime % 60)}m</strong>
                            </div>
                            ${item.totalTransferTime > 0 ? `
                                <div class="ranking-detail-item">
                                    <span style="color: var(--color-transfer);">‰πóÊèõ</span>
                                    <strong>${Math.floor(item.totalTransferTime / 60)}h ${Math.round(item.totalTransferTime % 60)}m</strong>
                                </div>
                            ` : ''}
                            <div class="ranking-detail-item">
                                <span>|</span>
                                <strong>${item.area.rent}</strong>
                            </div>
                        </div>
                    </div>
                `;
                });
            }
            
            console.log('üéØ Updating ranking list DOM with', rankedAreas.length, 'items');
            rankingList.innerHTML = html;
            console.log('‚úÖ Ranking view updated successfully');
        }
        
        function selectFromRanking(originalIndex) {
            selectedAreaIndex = originalIndex;
            
            // „ÇΩ„Éº„ÉàÊ∏à„Åø„É™„Çπ„Éà„Åß„ÅÆ‰ΩçÁΩÆ„ÇíË¶ã„Å§„Åë„Çã
            const displayAreas = sortedAreas.length > 0 ? sortedAreas : areas;
            const sortedIndex = displayAreas.findIndex(area => area.originalIndex === originalIndex);
            if (sortedIndex !== -1) {
                document.getElementById('areaSelect').value = sortedIndex;
            }
            
            setViewMode('single');
            updateAreaInfo();
            animate();
        }
        
        function zoom(factor) {
            zoomScale *= factor;
            zoomScale = Math.max(0.5, Math.min(5, zoomScale));
            const zoomText = Math.round(zoomScale * 100) + '%';
            const zoomLevel = document.getElementById('zoomLevel');
            const zoomLevelInfo = document.getElementById('zoomLevelInfo');
            if (zoomLevel) zoomLevel.textContent = zoomText;
            if (zoomLevelInfo) zoomLevelInfo.textContent = zoomText;
            animate();
        }
        
        function resetView() {
            zoomScale = 1.0;  // „Éá„Éï„Ç©„É´„Éà„ÅÆ1.0Ôºà100%Ôºâ„Å´Êàª„Åô
            offsetX = 0;
            offsetY = 0;
            const zoomText = Math.round(zoomScale * 100) + '%';
            const zoomLevel = document.getElementById('zoomLevel');
            const zoomLevelInfo = document.getElementById('zoomLevelInfo');
            if (zoomLevel) zoomLevel.textContent = zoomText;
            if (zoomLevelInfo) zoomLevelInfo.textContent = zoomText;
            animate();
        }
        
        function selectPropertyMobile(sortedIndex) {
            const displayAreas = sortedAreas.length > 0 ? sortedAreas : areas;
            const selectedArea = displayAreas[sortedIndex];
            selectedAreaIndex = selectedArea.originalIndex || sortedIndex;
            
            document.querySelectorAll('.property-chip').forEach((chip, i) => {
                chip.classList.toggle('active', i === sortedIndex);
            });
            updateAreaInfo();
            animate();
        }
        
        function toggleBottomSheet() {
            bottomSheetExpanded = !bottomSheetExpanded;
            document.getElementById('bottomSheet').classList.toggle('expanded', bottomSheetExpanded);
        }
        
        // ========================================
        // „Éû„Ç¶„Çπ„Éª„Çø„ÉÉ„ÉÅ„Ç§„Éô„É≥„Éà
        // ========================================
        canvas.addEventListener('mousedown', (e) => {
            isDragging = true;
            dragStartX = e.clientX;
            dragStartY = e.clientY;
            lastOffsetX = offsetX;
            lastOffsetY = offsetY;
            canvas.classList.add('grabbing');
        });
        
        canvas.addEventListener('mousemove', (e) => {
            if (isDragging) {
                offsetX = lastOffsetX + (e.clientX - dragStartX);
                offsetY = lastOffsetY + (e.clientY - dragStartY);
                animate();
            }
            
            // „ÉÑ„Éº„É´„ÉÅ„ÉÉ„ÉóËøΩÂæì
            const info = document.getElementById('timeInfo');
            if (info.style.display === 'block') {
                info.style.left = e.pageX + 15 + 'px';
                info.style.top = e.pageY + 15 + 'px';
            }
        });
        
        canvas.addEventListener('mouseup', () => {
            isDragging = false;
            canvas.classList.remove('grabbing');
        });
        
        canvas.addEventListener('mouseleave', () => {
            isDragging = false;
            canvas.classList.remove('grabbing');
        });
        
        // „Éû„Ç¶„Çπ„Éõ„Ç§„Éº„É´„Åß„Ç∫„Éº„É†
        canvas.addEventListener('wheel', (e) => {
            e.preventDefault();
            const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
            zoom(zoomFactor);
        });
        
        // ========================================
        // „Çø„ÉÉ„ÉÅ„Ç§„Éô„É≥„Éà
        // ========================================
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault(); // „Éá„Éï„Ç©„É´„Éà„ÅÆ„Çπ„ÇØ„É≠„Éº„É´„ÇÑ„Ç∫„Éº„É†„ÇíÈò≤Ê≠¢
            if (e.touches.length === 1) {
                // 1Êú¨Êåá„Åß„ÅÆ„Éë„É≥
                isDragging = true;
                lastTouchX = e.touches[0].clientX;
                lastTouchY = e.touches[0].clientY;
                lastOffsetX = offsetX;
                lastOffsetY = offsetY;
                canvas.classList.add('grabbing');
            } else if (e.touches.length === 2) {
                // 2Êú¨Êåá„Åß„ÅÆ„Éî„É≥„ÉÅ„Ç∫„Éº„É†
                isPinching = true;
                lastZoomScale = zoomScale;
                initialPinchDistance = getPinchDistance(e.touches);
                pinchStartX = (e.touches[0].clientX + e.touches[1].clientX) / 2;
                pinchStartY = (e.touches[0].clientY + e.touches[1].clientY) / 2;
                lastOffsetX = offsetX;
                lastOffsetY = offsetY;
            }
        });
        
        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault(); // „Éá„Éï„Ç©„É´„Éà„ÅÆ„Çπ„ÇØ„É≠„Éº„É´„ÇÑ„Ç∫„Éº„É†„ÇíÈò≤Ê≠¢
            if (isPinching && e.touches.length === 2) {
                // „Éî„É≥„ÉÅ„Ç∫„Éº„É†‰∏≠
                const currentPinchDistance = getPinchDistance(e.touches);
                if (initialPinchDistance === 0) return; // Ë∑ùÈõ¢„Åå0„ÅÆÂ†¥Âêà„ÅØÂá¶ÁêÜ„Åó„Å™„ÅÑ

                const scaleFactor = currentPinchDistance / initialPinchDistance;
                let newZoomScale = lastZoomScale * scaleFactor;
                newZoomScale = Math.max(0.5, Math.min(5, newZoomScale)); // „Ç∫„Éº„É†ÁØÑÂõ≤„ÇíÂà∂Èôê

                // „Ç∫„Éº„É†„ÅÆ‰∏≠ÂøÉ„ÇíÁ∂≠ÊåÅ„Åô„Çã„Åü„ÇÅ„ÅÆ„Ç™„Éï„Çª„ÉÉ„ÉàË™øÊï¥
                // ÁîªÈù¢‰∏≠ÂøÉ„ÇíÂü∫Ê∫ñ„Å®„Åó„Åü„Éî„É≥„ÉÅ‰∏≠ÂøÉ„ÅÆÁõ∏ÂØæÂ∫ßÊ®ô
                const relativePinchX = pinchStartX - (canvas.width / 2 + lastOffsetX);
                const relativePinchY = pinchStartY - (canvas.height / 2 + lastOffsetY);

                // Êñ∞„Åó„ÅÑ„Ç∫„Éº„É†„Çπ„Ç±„Éº„É´„Åß„ÅÆÁõ∏ÂØæÂ∫ßÊ®ô
                const newRelativePinchX = relativePinchX * (newZoomScale / lastZoomScale);
                const newRelativePinchY = relativePinchY * (newZoomScale / lastZoomScale);

                // Êñ∞„Åó„ÅÑ„Ç™„Éï„Çª„ÉÉ„Éà
                offsetX = lastOffsetX + (relativePinchX - newRelativePinchX);
                offsetY = lastOffsetY + (relativePinchY - newRelativePinchY);

                zoomScale = newZoomScale;
                animate();
            } else if (isDragging && e.touches.length === 1) {
                // „Éë„É≥‰∏≠
                offsetX = lastOffsetX + (e.touches[0].clientX - lastTouchX);
                offsetY = lastOffsetY + (e.touches[0].clientY - lastTouchY);
                animate();
            }
        });
        
        canvas.addEventListener('touchend', () => {
            isDragging = false;
            isPinching = false;
            canvas.classList.remove('grabbing');
            initialPinchDistance = 0; // „É™„Çª„ÉÉ„Éà
        });
        
        function getPinchDistance(touches) {
            const touch1 = touches[0];
            const touch2 = touches[1];
            return Math.sqrt(
                Math.pow(touch2.clientX - touch1.clientX, 2) +
                Math.pow(touch2.clientY - touch1.clientY, 2)
            );
        }
        
        // ========================================
        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        // ========================================
        function animate() {
            // ÂÄãÂà•„Éì„É•„Éº„ÅÆÊôÇ„ÅÆ„Åø„Ç≠„É£„É≥„Éê„Çπ„ÇíÊèèÁîª
            if (currentViewMode === 'single') {
                drawBackground();
                drawElements();
            }
        }
        
        // ========================================
        // „Éá„Éº„ÇøÊ§úË®ºÈñ¢Êï∞
        // ========================================
        function validateRouteTime(route) {
            // ÂêÑ„Çª„Ç∞„É°„É≥„Éà„ÅÆÊôÇÈñì„ÇíÂêàË®à„Åó„Å¶„ÄÅtotal_time„Å®‰∏ÄËá¥„Åô„Çã„ÅãÁ¢∫Ë™ç
            let calculatedTime = 0;
            
            if (route.details) {
                // ÂæíÊ≠©„ÅÆ„Åø„ÅÆÂ†¥Âêà
                if (route.details.walk_only) {
                    calculatedTime = route.details.walk_time || 0;
                } else {
                    // ÈßÖ„Åæ„Åß
                    calculatedTime += route.details.walk_to_station || 0;
                    
                    // ÈõªËªä„Å®‰πóÊèõ
                    if (route.details.trains) {
                        route.details.trains.forEach(train => {
                            calculatedTime += train.time || 0;
                            if (train.transfer_after) {
                                calculatedTime += train.transfer_after.time || 0;
                            }
                        });
                        
                        // ÊóßÂΩ¢Âºè„ÅÆ‰πóÊèõÊôÇÈñì
                        if (route.details.transfer_time) {
                            calculatedTime += route.details.transfer_time;
                        }
                    }
                    
                    // ÈßÖ„Åã„Çâ
                    calculatedTime += route.details.walk_from_station || 0;
                }
            }
            
            if (calculatedTime !== route.total_time) {
                console.warn(`ÊôÇÈñì„ÅÆ‰∏ç‰∏ÄËá¥: ${route.destination}`, {
                    Ë®àÁÆóÂÄ§: calculatedTime,
                    Ë®òËºâÂÄ§: route.total_time,
                    Â∑ÆÂàÜ: route.total_time - calculatedTime
                });
            }
            
            return calculatedTime === route.total_time;
        }
        
        // ========================================
        // ÂàùÊúüÂåñ
        // ========================================
        // DOMContentLoaded„ÇíÂæÖ„Å§
        async function initializeApp() {
            // „Åæ„ÅöJSON„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄ
            await loadDataFromJSON();
            
            // „Éá„Éº„Çø„ÅåË™≠„ÅøËæº„Åæ„Çå„Åü„ÇâÂàùÊúüÂåñÂá¶ÁêÜ„ÇíÁ∂ôÁ∂ö
            if (areas.length > 0) {
                updateAreaInfo();
                const zoomText = Math.round(zoomScale * 100) + '%';
            const zoomLevel = document.getElementById('zoomLevel');
            const zoomLevelInfo = document.getElementById('zoomLevelInfo');
            if (zoomLevel) zoomLevel.textContent = zoomText;
            if (zoomLevelInfo) zoomLevelInfo.textContent = zoomText;
                
                // ÂàùÊúüË°®Á§∫„ÇíÁ¢∫ÂÆü„Å´‰∏≠Â§Æ„Å´
                setTimeout(() => {
                    if (currentViewMode === 'single') {
                        animate();
                    }
                }, 100);
            }
        }
        
        // DOM„ÅåÂÆåÂÖ®„Å´Ë™≠„ÅøËæº„Åæ„Çå„Å¶„Åã„ÇâÂàùÊúüÂåñ
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeApp);
        } else {
            initializeApp();
        }
        
    </script>
</body>
</html>